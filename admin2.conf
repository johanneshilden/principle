# -----------------------------------------------------------------------------
#      Authenticate a user.
# -----------------------------------------------------------------------------
GET    /user/:username/:password     -> 
                                                                              
        SELECT id
             , username
             , name
             , role
             , password
        FROM sdrp_user
          WHERE sdrp_user.username = {{:username}}
            AND sdrp_user.password = {{:password}}

# -----------------------------------------------------------------------------
#      Retrieve all users.
# -----------------------------------------------------------------------------
GET    /user/all                     >>  ( id
                                         , username
                                         , name
                                         , role
                                         , depotId
                                         , depotName )         

        select sdrp_user.id                                                  
             , sdrp_user.username                                            
             , sdrp_user.name                                                
             , sdrp_user.role
             , depot.id
             , depot.name
        from sdrp_user                                                       
          left join depot 
            on depot.id = sdrp_user.depot_id
        order by                                                             
          sdrp_user.id

# -----------------------------------------------------------------------------
#      Update a user.
# -----------------------------------------------------------------------------
PUT    /user/:id                     >< 

        update sdrp_user set name     = {{name}}                                     
                           , depot_id = {{depotId}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert a new user.
# -----------------------------------------------------------------------------
POST   /user                         <> 

        insert into sdrp_user (name, username, password, role, depot_id)
          values ( {{name}}
                 , {{username}}
                 , {{password}}
                 , {{role}}
                 , {{depotId}} )

# -----------------------------------------------------------------------------
#      Change a user's password.
# -----------------------------------------------------------------------------
PATCH  /user/:id/password            ><

        update sdrp_user set password = {{password}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a user.
# -----------------------------------------------------------------------------
DELETE /user/:id                     --                                       

        delete from sdrp_user
          where id = {{:id}}
            and id <> 1              # root user cannot be deleted

# -----------------------------------------------------------------------------
#      Retrieve all depots.
# -----------------------------------------------------------------------------
GET    /depot                        >>                                       

        ( id
        , latitude
        , longitude
        , name
        , regionId
        , regionName )
                                                                              
        select depot.id
             , depot.latitude
             , depot.longitude
             , depot.name
             , depot.region_id
             , region.name
        from depot                                                           
          join region 
            on region.id = depot.region_id
        order by 
          depot.id

# -----------------------------------------------------------------------------
#      Update a depot.
# -----------------------------------------------------------------------------
PUT    /depot/:id                    ><
        
        update depot set latitude  = {{latitude}}
                       , longitude = {{longitude}}
                       , name      = {{name}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Detach the currently assigned depot manager from a depot.
# -----------------------------------------------------------------------------
DELETE /depot-manager/~/depot/:id    --                                       

        update sdrp_user set depot_id = NULL 
          where depot_id = {{:id}}  
            and role = 'depot-manager'

# -----------------------------------------------------------------------------
#      Assign a depot manager to a depot.
# -----------------------------------------------------------------------------
PATCH  /depot-manager/~/depot/:id    ><                                       

        update sdrp_user set depot_id = {{:id}}
          where id = {{userId}}
            and role = 'depot-manager'

# -----------------------------------------------------------------------------
#      Delete all area associations for a depot.
# -----------------------------------------------------------------------------
DELETE /area/~/depot/:id             --

        update area set depot_id = null 
          where depot_id = {{:id}}

# -----------------------------------------------------------------------------
#      Assign a depot to a collection of areas.
# -----------------------------------------------------------------------------
PATCH  /area/~/depot/:id             ><

        update area set depot_id = {{:id}}
          where area.id in 
            ( {{areas}} )

# -----------------------------------------------------------------------------
#      Create a depot.
# -----------------------------------------------------------------------------
POST   /depot                        <>                                       

        insert into depot 
          ( name
          , latitude
          , longitude
          , region_id
          ) values
          ( {{name}}
          , {{latitude}}
          , {{longitude}}
          , {{regionId}} )

# -----------------------------------------------------------------------------
#      Create a depot and its connected resources.
#
#      {
#        "name"           : string,
#        "latitude"       : number,
#        "longitude"      : number,
#        "areas"          : array,
#        "depotManagerId" : number,
#        "regionId"       : number
#      }
# -----------------------------------------------------------------------------
POST   /!depot                       |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/depot",
            "fields" : ["name", "latitude", "longitude", "regionId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : ["userId"]
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/area/~/depot/:id",
            "fields" : ["areas"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["depotManagerId", "userId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Update a depot and its connected resources.
#
#      {
#        "name"           : string,
#        "latitude"       : number,
#        "longitude"      : number,
#        "areas"          : array,
#        "depotManagerId" : number
#      }
# -----------------------------------------------------------------------------
PUT    /!depot/:id                   |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PUT",
            "uri"    : "/depot/:id",
            "fields" : ["name", "latitude", "longitude"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : []
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : ["userId"]
        },
        {
            "id"     : 4,
            "method" : "DELETE",
            "uri"    : "area/~/depot/:id",
            "fields" : []
        },
        {
            "id"     : 5,
            "method" : "PATCH",
            "uri"    : "area/~/depot/:id",
            "fields" : ["areas"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["depotManagerId", "userId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 5,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 5,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#       Delete a depot.
# -----------------------------------------------------------------------------
DELETE  /depot/:id                    --                                       

         delete from depot 
           where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a depot and its connected resources. 
# -----------------------------------------------------------------------------
DELETE /!depot/:id                   |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : []
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/area/~/depot/:id",
            "fields" : ["status"]
        },
        {
            "id"     : 3,
            "method" : "DELETE",
            "uri"    : "/depot/:id",
            "fields" : ["status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Retrieve all areas.
# -----------------------------------------------------------------------------
GET    /area                         >>                                       

        ( id
        , regionId
        , name
        , depotId
        , regionName )
                                                                              
        select area.id                                                            
             , area.region_id                                                     
             , area.name                                                          
             , area.depot_id                                                      
             , region.name
        from area                                                            
          join region 
            on region.id = area.region_id
        order by 
          area.id

# -----------------------------------------------------------------------------
#      Create a new area.
# -----------------------------------------------------------------------------
POST   /area                         <>                                       
                                                                              
        insert into area                                                     
          ( region_id, name, depot_id )                                      
        values                                                               
          ( {{regionId}}                                                     
          , {{name}}                                                         
          , {{depotId}}                                                      
          )                        

# -----------------------------------------------------------------------------
#      Delete an area.
# -----------------------------------------------------------------------------
DELETE /area/:id                     --                                       
                                                                              
        delete from area                                                     
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update an area.
# -----------------------------------------------------------------------------
PUT    /area/:id                     ><                                       
                                                                              
        update area set name  = {{name}}                                     
                  , region_id = {{regionId}}                                 
                  , depot_id  = {{depotId}}                                  
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update an area and its connected resources.
#
#      {
#        "name"           : string,
#        "depotId"        : number,
#        "regionId"       : number,
#        "fieldstaffUser" : number | null,
#        "callcenterUser" : number | null
#      }
# -----------------------------------------------------------------------------
PUT    /!area/:id                    |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PUT",
            "uri"    : "/area/:id",
            "fields" : ["name", "regionId", "depotId"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/area/:id/~/user",
            "fields" : ["status"]
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/area/:id/~/field-staff",
            "fields" : ["status", "userId"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/area/:id/~/call-center",
            "fields" : ["status", "userId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 4,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id", "userId"]
                },
                {
                    "action": "rename",
                    "arguments": ["fieldstaffUser", "userId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id", "userId"]
                },
                {
                    "action": "rename",
                    "arguments": ["callcenterUser", "userId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Delete an area and its connected resources.
# -----------------------------------------------------------------------------
DELETE /!area/:id                    |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/area/:id/~/user",
            "fields" : []
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/area/:id",
            "fields" : ["status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Retrieve all area-user associations.
# -----------------------------------------------------------------------------
GET    /area-user                    >>                                       

        ( areaId
        , id
        , username
        , name
        , role )

        select area_user.area_id
             , sdrp_user.id
             , sdrp_user.username
             , sdrp_user.name
             , sdrp_user.role
        from area_user
          join sdrp_user
            on sdrp_user.id = area_user.user_id

# -----------------------------------------------------------------------------
#      Set role assignments for an area.
# -----------------------------------------------------------------------------
PATCH  /area/:id/~/:role             ><                                       

        insert into area_user
          ( user_id, area_id )                                               
          ( select {{userId}}                                                
                 , {{:id}}                                                   
            from sdrp_user                                                   
              where role = {{:role}}
                and id   = {{userId}}                                          
          )

# -----------------------------------------------------------------------------
#      Delete all role assignments for an area.
# -----------------------------------------------------------------------------
DELETE /area/:id/~/user              --                                       

        delete from area_user
          where area_id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all regions.
# -----------------------------------------------------------------------------
GET    /region                       >>  

        select id
             , name
        from region 
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new region.
# -----------------------------------------------------------------------------
POST   /region                       <>  

        insert into region 
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a region.
# -----------------------------------------------------------------------------
PUT    /region/:id                   ><  

        update region set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a region.
# -----------------------------------------------------------------------------
DELETE /region/:id                   --                                       
                                                                              
        delete from region
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all vehicles.
# -----------------------------------------------------------------------------
GET    /vehicle                      >>  

        ( id
        , regNo
        , depotId
        , driverId
        , isAvailable
        , make
        , model
        , status
        , weightCategory
        , weightCatId
        , driverName
        , driverUsername 
        , depot 
        , maintenanceStartTime )

        select vehicle.id
             , vehicle.reg_no
             , vehicle.depot_id
             , vehicle.user_id
             , vehicle.is_available
             , vehicle.make
             , vehicle.model
             , vehicle.status
             , weight_category.name
             , vehicle.category_id
             , sdrp_user.name
             , sdrp_user.username
             , depot.name
             , ( select start_time 
                 from vehicle_maintenance_activity 
                   where vehicle_id = vehicle.id 
                 order by 
                   start_time desc 
                 limit 1 )
        from vehicle 
          left join sdrp_user 
            on sdrp_user.id = vehicle.user_id
          join weight_category
            on weight_category.id = vehicle.category_id
          join depot
            on depot.id = vehicle.depot_id
        order by 
          vehicle.id

# -----------------------------------------------------------------------------
#      Create a new vehicle.
# -----------------------------------------------------------------------------
POST   /vehicle                      <>
                                                                              
        insert into vehicle
          ( reg_no
          , depot_id
          , user_id
          , is_available
          , make
          , model
          , status
          , category_id 
          ) values                                                               
          ( {{regNo}}          
          , {{depotId}}
          , {{userId}}
          , {{isAvailable}}
          , {{make}}
          , {{model}}
          , {{status}}
          , {{categoryId}}
          )                        

# -----------------------------------------------------------------------------
#      Update a vehicle.
# -----------------------------------------------------------------------------
PUT    /vehicle/:id                  ><
        
        update vehicle set reg_no       = {{regNo}}
                         , depot_id     = {{depotId}}
                         , user_id      = {{userId}}
                         , is_available = {{isAvailable}}
                         , make         = {{make}}
                         , model        = {{model}}
                         , status       = {{status}}
                         , category_id  = {{categoryId}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#       Set the status to 'in_maintenance' for a vehicle.
# -----------------------------------------------------------------------------
PATCH   /vehicle/status/maintenance  ><                                       

        update vehicle set status = 'in_maintenance'
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#       Set the status to 'active' for a vehicle.
# -----------------------------------------------------------------------------
PATCH   /vehicle/status/active       ><                                       

        update vehicle set status = 'active'
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#       Reset driver assignment for a vehicle.
# -----------------------------------------------------------------------------
PATCH   /vehicle/driver/null         --                                       

        update vehicle set user_id = null
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#      Assign a driver to a vehicle.
# -----------------------------------------------------------------------------
PATCH  /vehicle/driver               ><                                       

        update vehicle set user_id = {{driverId}} 
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#      Remove any existing vehicle assignments for a driver.
# -----------------------------------------------------------------------------
DELETE /driver/~/vehicle             --                                       

        update vehicle set user_id = null
          where user_id = {{driverId}}

# -----------------------------------------------------------------------------
#      Assign a driver to a vehicle and remove any previous vehicle assignment.
# -----------------------------------------------------------------------------
PATCH  /!vehicle/driver              |>                                       
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/driver/~/vehicle",
            "fields" : ["driverId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/vehicle/driver",
            "fields" : ["driverId", "vehicleId", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
} 

# -----------------------------------------------------------------------------
#      Delete a vehicle.
# -----------------------------------------------------------------------------
DELETE /vehicle/:id                  --                                       
                                                                              
        delete from vehicle
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle and any associated fuel log activity entries.
# -----------------------------------------------------------------------------
DELETE /!vehicle/:id                 |>                                       
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/fuel-activity/vehicle/:id",
            "fields" : [":id"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/vehicle/:id",
            "fields" : [":id", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get the vehicle currently assigned to a driver.
# -----------------------------------------------------------------------------
GET    /vehicle/driver/:id           ->  

        ( id
        , regNo
        , depotId
        , driverId
        , isAvailable
        , make
        , model
        , status
        , weightCategory
        , weightCatId
        , driverName
        , driverUsername 
        , depot 
        , maintenanceStartTime )

        select vehicle.id
             , vehicle.reg_no
             , vehicle.depot_id
             , vehicle.user_id
             , vehicle.is_available
             , vehicle.make
             , vehicle.model
             , vehicle.status
             , weight_category.name
             , vehicle.category_id
             , sdrp_user.name
             , sdrp_user.username
             , depot.name
             , ( select start_time 
                 from vehicle_maintenance_activity 
                   where vehicle_id = vehicle.id 
                 order by 
                   start_time desc 
                 limit 1 )
        from vehicle 
          left join sdrp_user 
            on sdrp_user.id = vehicle.user_id
          join weight_category
            on weight_category.id = vehicle.category_id
          join depot
            on depot.id = vehicle.depot_id
        where vehicle.user_id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all vehicle weight categories.
# -----------------------------------------------------------------------------
GET    /weight-category              >>  

        select id
             , name
        from weight_category 
        order by 
          weight_category.id

# -----------------------------------------------------------------------------
#      Insert a new vehicle weight category.
# -----------------------------------------------------------------------------
POST   /weight-category              <>  

        insert into weight_category 
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a vehicle weight category.
# -----------------------------------------------------------------------------
PUT    /weight-category/:id          ><  

        update weight_category set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle weight category.
# -----------------------------------------------------------------------------
DELETE /weight-category/:id          --                                       

        delete from weight_category
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle weight category and all associated product load limits.
# -----------------------------------------------------------------------------
DELETE /!weight-category/:id         |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/product-limit/category/:id",
            "fields" : [":id"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/weight-category/:id",
            "fields" : [":id", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

GET    /stock/product/:product/depot/:depot   ->

        ( available )

        SELECT COALESCE(
            ( SELECT available 
              FROM stock 
              WHERE product_id = {{:product}}
                AND depot_id = {{:depot}}
            ), 0) 
        FROM stock LIMIT 1;

POST   /stock/products/depot/:depot           >>

        select available 
        from stock 
        where depot_id = {{:depot}} 
          and product_id in ( {{products}} )

# -----------------------------------------------------------------------------
#      Get stock availability information for a depot. 
# -----------------------------------------------------------------------------
GET    /stock/depot/:id              >>  

        ( productId
        , actual
        , available
        , productName ) 
        
        select stock.product_id
             , stock.actual
             , stock.available
             , product.name 
        from stock 
          join product 
            on product.id = stock.product_id 
          where depot_id = {{:id}} 
        order by 
          stock.id

# -----------------------------------------------------------------------------
#      Increase actual stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/actual/add             ><  

        update stock set actual = actual + {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Increase available stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/available/add          ><  

        update stock set available = available + {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Reduce actual stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/actual/remove          ><  

        update stock set actual = actual - {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Reduce available stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/available/remove       ><  

        update stock set available = available - {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}
            and available >= {{quantity}}

# -----------------------------------------------------------------------------
#      Get all stock activity for a depot. 
# -----------------------------------------------------------------------------
GET    /stock-activity               >>  

        ( id
        , activityType
        , created
        , productId
        , quantity
        , depotId
        , reportDamageType
        , reportDescription 
        , productName )

        select stock_activity.id
             , stock_activity.activity_type
             , stock_activity.created
             , stock_activity.product_id
             , stock_activity.quantity
             , stock_activity.depot_id
             , stock_damage_report.damage_type
             , stock_damage_report.description
             , product.name
        from stock_activity
          left join stock_damage_report 
            on stock_damage_report.activity_id = stock_activity.id
          join product 
            on product.id = stock_activity.product_id
        order by
          stock_activity.id

# -----------------------------------------------------------------------------
#      Create a stock activity log entry.
# -----------------------------------------------------------------------------
POST   /stock-activity               <>

        insert into stock_activity
          ( activity_type
          , created
          , depot_id
          , product_id
          , quantity
          ) values 
          ( {{type}}
          , 'now()'
          , {{depotId}}
          , {{productId}}
          , {{quantity}}
          )

# -----------------------------------------------------------------------------
#      Insert zero actual and available quantity for a product, if stock data 
#      is not already present for the product-depot pair.
# -----------------------------------------------------------------------------
PATCH  /stock/init                   --

        insert into stock 
          ( actual
          , available
          , depot_id
          , product_id 
          ) ( select 0, 0, {{depotId}}, {{productId}}
              where ( select count(id) 
                      from stock 
                        where depot_id   = {{depotId}}
                          and product_id = {{productId}}
                    ) = 0 )

# -----------------------------------------------------------------------------
#      Add product stock to a depot and create an associated log entry.
#
#      {
#        "quantity"       : number,
#        "productId"      : number,
#        "type"           : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!stock/add/depot/:id         |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/actual/add",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/stock/available/add",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["quantity", "type", "depotId", "productId", "status"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/stock/init",
            "fields" : ["depotId", "productId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "source": 4,
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Remove product stock from a depot and create an associated activity 
#      log entry.
#
#      {
#        "quantity"       : number,
#        "productId"      : number,
#        "type"           : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!stock/remove/depot/:id      |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/actual/remove",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/stock/available/remove",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["quantity", "type", "depotId", "productId", "status"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/stock/init",
            "fields" : ["depotId", "productId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "source": 4,
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Report damaged product stock for a depot. 
#
#      {
#        "quantity"       : number,
#        "productId"      : number,
#        "type"           : string,
#        "damageType"     : string,
#        "description"    : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!stock/report-damage/depot/:id  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/actual/remove",
            "fields" : ["quantity", "depotId", "productId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/stock/available/remove",
            "fields" : ["quantity", "depotId", "productId"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["quantity", "type", "depotId", "productId"]
        },
        {
            "id"     : 4,
            "method" : "POST",
            "uri"    : "/stock-damage-report",
            "fields" : ["activityId", "damageType", "description"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "depotId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "activityId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get all customers pending confirmation.
# -----------------------------------------------------------------------------
GET    /pending                      >>                                       

        ( id
        , name
        , phone
        , address
        , created
        , userId )

        select id
             , name
             , phone
             , address
             , created
             , user_id
        from customer_pending
        order by 
          id

# -----------------------------------------------------------------------------
#      Delete pending customer.
# -----------------------------------------------------------------------------
DELETE /pending/:id                  --                                       

        delete from customer_pending 
        where id = {{:id}}

# -----------------------------------------------------------------------------
#      Retrieve a list of all customers.
# -----------------------------------------------------------------------------
GET    /customer                     >>                                       
                                                                              
        ( id                                                                 
        , name                                                               
        , address                                                      
        , created                                                            
        , latitude                                                           
        , longitude                                                          
        , tin                                                                
        , phone                                                              
        , isActive                                                           
        , areaId                                                             
        , priceCatId                                                         
        , areaName                                                           
        , priceCategory )                                                                    
                                                                             
        select customer.id                                                   
             , customer.name                                                 
             , customer.address                                       
             , customer.created                                              
             , customer.latitude                                             
             , customer.longitude                                            
             , customer.tin                                                  
             , customer.phone                                                
             , customer.is_active                                            
             , customer.area_id                                              
             , customer.price_cat_id                                         
             , area.name                                                     
             , product_price_category.name                                   
        from customer                                                        
          join area                                                          
            on area.id = customer.area_id                                    
          join product_price_category                                        
            on product_price_category.id = customer.price_cat_id             
        order by                                                             
          customer.id

# -----------------------------------------------------------------------------
#      Insert a new customer.
# -----------------------------------------------------------------------------
POST   /customer                     <>                                       
                                                                              
        insert into customer                                                 
          ( name                                                               
          , address                                                     
          , latitude                                                           
          , longitude                                                          
          , tin                                                                
          , phone                                                              
          , is_active                                                          
          , area_id                                                            
          , price_cat_id                                                       
          ) values                                                             
          ( {{name}}                                                         
          , {{address}}                                                
          , {{latitude}}                                                     
          , {{longitude}}                                                    
          , {{tin}}                                                          
          , {{phone}}                                                        
          , {{isActive}}                                                     
          , {{areaId}}                                                       
          , {{priceCatId}}                                                   
          )

# -----------------------------------------------------------------------------
#      Update a customer.
# -----------------------------------------------------------------------------
PUT    /customer/:id                 ><  

        update customer set name           = {{name}}
                          , address        = {{address}}
                          , latitude       = {{latitude}}
                          , longitude      = {{longitude}}
                          , tin            = {{tin}}
                          , phone          = {{phone}}
                          , is_active      = {{isActive}}
                          , area_id        = {{areaId}}
                          , price_cat_id   = {{priceCatId}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get all contact details for a customer.
# -----------------------------------------------------------------------------
GET    /contact/customer/:id         >>                                       
                                                                              
        select customer_id
             , id
             , kind
             , datum 
             , meta                                                            
        from customer_contact                                                
          where customer_id = {{:id}}                                        
        group by                                                             
          id, kind                                                           
        order by 
          id 

# -----------------------------------------------------------------------------
#      Fetch a single contact.
# -----------------------------------------------------------------------------
GET    /contact/:id                  ->  

        ( customerId
        , id
        , kind
        , datum
        , meta
        , customerName )

        select customer_contact.customer_id
             , customer_contact.id
             , customer_contact.kind
             , customer_contact.datum
             , customer_contact.meta                                                            
             , customer.name
         from customer_contact 
           join customer 
             on customer.id = customer_contact.customer_id
          where customer_contact.id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert a new customer contact.
# -----------------------------------------------------------------------------
POST   /contact/customer/:id         <>  

        insert into customer_contact 
          ( customer_id
          , kind
          , datum
          , meta
          ) values 
          ( {{:id}}
          , {{kind}}
          , {{datum}}
          , {{meta}}
          )

# -----------------------------------------------------------------------------
#      Insert a customer contact and associated customer activity log entry.
#
#      {
#        "datetime"       : string,
#        "userId"         : int,
#        "contactType"    : string,
#        "kind"           : string,
#        "meta"           : string,
#        "datum"          : string
#      }
# -----------------------------------------------------------------------------
POST   /!contact/customer/:id        |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/contact/customer/:id",
            "fields" : [":id", "kind", "meta", "datum"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/activity/customer/:id",
            "fields" : ["status", "datetime", ":id", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "transformers": [],
            "filters": []
        },
        {
            "destination": 2,
            "transformers": [
                {
                    "action": "copy",
                    "arguments": [":id", "entityId"]
                },
                {
                    "action": "bind",
                    "arguments": ["kind", "customer-contact-info"]
                },
                {
                    "action": "bind",
                    "arguments": ["description", "Customer contact information added."]
                }
            ],
            "filters": []
        },
        {
            "source": 1,
            "destination": 2,
            "transformers": [],
            "filters": []
        },
        {
            "source": 1,
            "transformers": [],
            "filters": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Update a customer contact.
# -----------------------------------------------------------------------------
PUT    /contact/:id/customer/:cid    ><  

        update customer_contact set customer_id = {{:cid}}
                                  , kind        = {{kind}}
                                  , datum       = {{datum}}
                                  , meta        = {{meta}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a customer contact.
# -----------------------------------------------------------------------------
DELETE /contact/:id/customer/:cid    --

        delete from customer_contact
          where id = {{:id}}
            and customer_id = {{:cid}}

# -----------------------------------------------------------------------------
#      Register a customer, to be confirmed by field staff.
# -----------------------------------------------------------------------------
POST   /customer-pending             <>                                       
                                                                              
        insert into customer_pending
          ( name                                                               
          , address                                                     
          , phone                                                              
          , created
          , user_id
          ) values                                                             
          ( {{name}}                                                         
          , {{address}}                                                
          , {{phone}}                                                        
          , 'now()'
          , {{userId}}
          )

# -----------------------------------------------------------------------------
#      Get a list of all customer complaints.
# -----------------------------------------------------------------------------
GET    /complaint                    >>  

        ( id
        , created
        , customerId
        , description
        , title
        , kind
        , resolved
        , customerId
        , customer )

        select complaint.id
             , complaint.created
             , complaint.customer_id
             , complaint.description
             , complaint.title
             , complaint.kind
             , complaint.resolved
             , customer.id
             , customer.name
        from complaint 
          join customer
            on customer.id = complaint.customer_id
        order by 
          complaint.id

# -----------------------------------------------------------------------------
#      Resolve a complaint and create a customer activity log entry.
#
#      {
#        "datetime"       : string,
#        "userId"         : int,
#        "customerId"     : int,
#        "description"    : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!complaint/resolve/:id        |> 
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/complaint/resolve/:id",
            "fields" : [":id", "datetime"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/activity/customer/:id",
            "fields" : ["datetime", ":id", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "transformers": [],
            "filters": []
        },
        {
            "destination": 2,
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["kind", "complaint-resolved"]
                },
                {
                    "action": "bind",
                    "arguments": ["contactType", null]
                },
                {
                    "action": "rename",
                    "arguments": ["customerId", ":id"]
                },
                {
                    "action": "rename",
                    "arguments": [":id", "entityId"]
                }
            ],
            "filters": []
        },
        {
            "source": 1,
            "transformers": [],
            "filters": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Resolve a complaint.
# -----------------------------------------------------------------------------
PATCH  /complaint/resolve/:id        --  

        update complaint set resolved = {{datetime}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Create a service complaint and customer activity log entry.
#
#      {
#        "datetime"       : string,
#        "title"          : string,
#        "description"    : string,
#        "userId"         : int,
#        "contactType"    : string
#      }
# -----------------------------------------------------------------------------
POST   /!complaint/service/customer/:id |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/complaint/service/customer/:id",
            "fields" : ["datetime", "title", "description"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/activity/customer/:id",
            "fields" : ["datetime", ":id", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["kind", "service-complaint"]
                },
                {
                    "action": "bind",
                    "arguments": ["description", "A service complaint was registered."]
                }
             ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "entityId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Create a service complaint.
# -----------------------------------------------------------------------------
POST   /complaint/service/customer/:id  <>

        insert into complaint (created, customer_id, title, description, kind)
          values ( {{datetime}}
                 , {{:id}}
                 , {{title}}
                 , {{description}}
                 , 'service' )

# -----------------------------------------------------------------------------
#      Create a quality complaint.
# -----------------------------------------------------------------------------
POST   /complaint/quality/customer/:id  <>

        insert into complaint (created, customer_id, title, description, kind)
          values ( {{datetime}}
                 , {{:id}}
                 , {{title}}
                 , {{description}}
                 , 'quality' )

# -----------------------------------------------------------------------------
#      Insert a complaint product.
# -----------------------------------------------------------------------------
POST   /complaint-product            <>  

        insert into complaint_product
          ( batch_number
          , complaint_id
          , description
          , product_id
          , quantity
          , produced
          , expiry_date
          ) values 
          ( {{batchNumber}}
          , {{complaintId}}
          , {{description}}
          , {{productId}}
          , {{quantity}}
          , {{produced}}
          , {{expiryDate}}
          )

# -----------------------------------------------------------------------------
#      Create a quality complaint, customer activity log entry and the relevant 
#      complaint-product associations.
#
#      {
#        "datetime"       : string,
#        "title"          : string,
#        "description"    : string,
#        "userId"         : int,
#        "contactType"    : string,
#        "products" : [
#              {
#                "batchNumber" : string,
#                "description" : string,
#                "productId"   : int,
#                "quantity"    : int,
#                "produced"    : string,
#                "expiryDate"  : string 
#              }
#        ]
#      }
# -----------------------------------------------------------------------------
POST   /!complaint/quality/customer/:id  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/complaint/quality/customer/:id",
            "fields" : ["datetime", "title", "description"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/complaint-product",
            "expand" : "products",
            "fields" : ["batchNumber", "complaintId", "description", "productId", "quantity", "produced", "expiryDate"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/activity/customer/:id",
            "fields" : ["datetime", ":id", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["products"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["kind", "quality-complaint"]
                },
                {
                    "action": "bind",
                    "arguments": ["description", "A quality complaint was registered."]
                }
             ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "complaintId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "entityId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get all complaint-product associations.
# -----------------------------------------------------------------------------
GET    /complaint-product        >>

        ( id
        , batchNumber
        , complaintId
        , description
        , productId
        , quantity
        , produced
        , expiryDate
        , name )

        select complaint_product.id 
             , complaint_product.batch_number 
             , complaint_product.complaint_id 
             , complaint_product.description 
             , complaint_product.product_id 
             , complaint_product.quantity 
             , complaint_product.produced 
             , complaint_product.expiry_date
             , product.name
        from complaint_product
          join product 
            on product.id = complaint_product.product_id
        order by complaint_product.id

# -----------------------------------------------------------------------------
#      Get all products associated with a quality complaint.
# -----------------------------------------------------------------------------
GET    /complaint-product/:id        >>

        ( id
        , batchNumber
        , complaintId
        , description
        , productId
        , quantity
        , produced
        , expiryDate
        , name )

        select complaint_product.id 
             , complaint_product.batch_number 
             , complaint_product.complaint_id 
             , complaint_product.description 
             , complaint_product.product_id 
             , complaint_product.quantity 
             , complaint_product.produced 
             , complaint_product.expiry_date
             , product.name
        from complaint_product
          join product 
            on product.id = complaint_product.product_id
        where complaint_product.complaint_id = {{:id}}
        order by complaint_product.id

# -----------------------------------------------------------------------------
#      Get all call activity data for a customer.
# -----------------------------------------------------------------------------
GET    /activity/customer/:id        >>

        ( id
        , created
        , description
        , kind
        , userId
        , contactType 
        , entityId
        , user )

        select customer_activity.id
             , customer_activity.created
             , customer_activity.description
             , customer_activity.kind
             , customer_activity.user_id
             , customer_activity.contact_type
             , customer_activity.entity_id
             , sdrp_user.name
        from customer_activity
          join sdrp_user 
            on sdrp_user.id = customer_activity.user_id
          where customer_activity.customer_id = {{:id}}
        order by
          customer_activity.id

# -----------------------------------------------------------------------------
#      Insert a customer activity.
# -----------------------------------------------------------------------------
POST   /activity/customer/:id        <>

        insert into customer_activity ( created, customer_id, description, kind, user_id, contact_type, entity_id )
            values ( {{datetime}}
                   , {{:id}}
                   , {{description}}
                   , {{kind}}
                   , {{userId}} 
                   , {{contactType}} 
                   , {{entityId}} 
                   )

GET    /activity/pending/callback  >>

        ( id
        , created
        , description
        , kind
        , userId
        , contactType 
        , entityId
        , customerId
        , customerName
        , user )

        SELECT ca.id
             , ca.created
             , ca.description
             , ca.kind
             , ca.user_id
             , ca.contact_type
             , ca.entity_id
             , ca.customer_id
             , customer.name
             , sdrp_user.name 
        FROM customer_activity ca 
          JOIN sdrp_user 
            ON sdrp_user.id = ca.user_id 
          JOIN customer
            ON customer.id = ca.customer_id
        WHERE kind = 'scheduled-call-back' 
        GROUP BY ca.id
            , sdrp_user.name 
            , customer.name
        HAVING ( SELECT COALESCE(MAX(created), '1970-01-01')
                 FROM customer_activity 
                 WHERE contact_type = 'proactive' 
                   AND customer_id = ca.customer_id 
                   AND kind <> 'scheduled-call-back'
               ) < ca.created 
          AND ca.created :: date = now() :: date

GET    /activity/pending/visit  >>

        ( id
        , created
        , description
        , kind
        , userId
        , contactType 
        , entityId
        , customerId
        , customerName
        , user )

        SELECT ca.id
             , ca.created
             , ca.description
             , ca.kind
             , ca.user_id
             , ca.contact_type
             , ca.entity_id
             , ca.customer_id
             , customer.name
             , sdrp_user.name 
        FROM customer_activity ca 
          JOIN sdrp_user 
            ON sdrp_user.id = ca.user_id 
          JOIN customer
            ON customer.id = ca.customer_id
        WHERE kind = 'scheduled-visit' 
        GROUP BY ca.id
               , sdrp_user.name 
               , customer.name
        HAVING ( SELECT COALESCE(MAX(created), '1970-01-01')
                 FROM customer_activity 
                 WHERE kind = 'visit' 
                   AND customer_id = ca.customer_id 
               ) < ca.created 
          AND ca.created :: date = now() :: date

# -----------------------------------------------------------------------------
#      Retrieve all scheduled customer activities.
# -----------------------------------------------------------------------------
GET    /activity/scheduled           >>

        ( id
        , created
        , description
        , kind
        , userId
        , contactType 
        , entityId
        , user )

        select customer_activity.id
             , customer_activity.created
             , customer_activity.description
             , customer_activity.kind
             , customer_activity.user_id
             , customer_activity.contact_type
             , customer_activity.entity_id
             , sdrp_user.name
        from customer_activity 
          join sdrp_user 
            on sdrp_user.id = customer_activity.user_id
        where kind = 'scheduled-call-back' 
           or kind = 'scheduled-visit'

# -----------------------------------------------------------------------------
#      Get all product price categories.
# -----------------------------------------------------------------------------
GET    /price-category               >>                                       
                                                                              
        select id, name                                                      
        from product_price_category                                          
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new product price category.
# -----------------------------------------------------------------------------
POST   /price-category               <>  

        insert into product_price_category
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a price category.
# -----------------------------------------------------------------------------
PUT    /price-category/:id           ><  
                                                                              
        update product_price_category set name = {{name}}                                     
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a price category.
# -----------------------------------------------------------------------------
DELETE /price-category/:id           --

        delete from product_price_category
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a price category and all associated product price data.
# -----------------------------------------------------------------------------
DELETE /!price-category/:id          |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/price-category/:id",
            "fields" : [":id", "status"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/product-price/category/:id",
            "fields" : [":id"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "destination": 1,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get a list of all stock damage types.
# -----------------------------------------------------------------------------
GET    /stock-damage-type            >>  

        select id
             , name
        from stock_damage_type 
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new stock damage type.
# -----------------------------------------------------------------------------
POST   /stock-damage-type            <>  

        insert into stock_damage_type 
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a stock damage type.
# -----------------------------------------------------------------------------
PUT    /stock-damage-type/:id        ><  

        update stock_damage_type set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a stock damage type.
# -----------------------------------------------------------------------------
DELETE /stock-damage-type/:id        --  

        delete from stock_damage_type 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Create a stock damage report.
# -----------------------------------------------------------------------------
POST   /stock-damage-report          <>  

        insert into stock_damage_report
          ( activity_id
          , damage_type
          , description
          ) values 
          ( {{activityId}} 
          , {{damageType}}
          , {{description}} 
          )

# -----------------------------------------------------------------------------
#      Get a list of all vehicle maintenance activity types.
# -----------------------------------------------------------------------------
GET    /maintenance-activity-type    >>  

        select id
             , name
        from maintenance_activity_type 
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new vehicle maintenance activity type.
# -----------------------------------------------------------------------------
POST   /maintenance-activity-type    <>  

        insert into maintenance_activity_type
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a vehicle maintenance activity type.
# -----------------------------------------------------------------------------
PUT    /maintenance-activity-type/:id  ><  

        update maintenance_activity_type set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle maintenance activity type.
# -----------------------------------------------------------------------------
DELETE /maintenance-activity-type/:id  --  

        delete from maintenance_activity_type
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all products.
# -----------------------------------------------------------------------------
GET    /product                      >>  

        ( id
        , deleted
        , description
        , name
        , unitSize )
        
        select product.id
             , product.deleted
             , product.description
             , product.name
             , product.unit_size
        from product 
        order by 
          product.id

# -----------------------------------------------------------------------------
#      Get total number of products.
# -----------------------------------------------------------------------------
GET    /count/product                ->

        ( count ) select count(id) from product

# -----------------------------------------------------------------------------
#      Create a product.
# -----------------------------------------------------------------------------
POST   /product                      <>  

        insert into product 
          ( name
          , description
          , unit_size
          , deleted
          ) values 
          ( {{name}}
          , {{description}}
          , {{unitSize}}
          , 'false' 
          )

# -----------------------------------------------------------------------------
#      Create a product and its connected resources.
#
#      {
#        "name"           : string,
#        "description"    : string,
#        "unitSize"       : string,
#        "limits" : [
#              {
#                "categoryId" : number,
#                "limit"      : number
#              }
#            ],
#        "prices" : [
#              {
#                "priceCatId" : number,
#                "price"      : number
#              }
#            ]
#      }
# -----------------------------------------------------------------------------
POST   /!product                     |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/product",
            "fields" : ["name", "description", "unitSize"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/product-price",
            "expand" : "prices",
            "fields" : ["productId", "priceCatId", "price"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/product-limit",
            "expand" : "limits",
            "fields" : ["productId", "categoryId", "limit"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["limits"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "productId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "productId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "source": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["limits"]
                }
            ]
        }
    ]
}
 
# -----------------------------------------------------------------------------
#      Update a product.
# -----------------------------------------------------------------------------
PUT    /product/:id                  ><  

        update product set name        = {{name}}
                         , description = {{description}}
                         , unit_size   = {{unitSize}}
                         , deleted     = {{deleted}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update a product and its connected resources.
#
#      {
#        "name"           : string,
#        "description"    : string,
#        "unitSize"       : string,
#        "limits" : [
#              {
#                "categoryId" : number,
#                "limit"      : number
#              }
#            ],
#        "prices" : [
#              {
#                "priceCatId" : number,
#                "price"      : number
#              }
#            ]
#      }
# -----------------------------------------------------------------------------
PUT    /!product/:id                 |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PUT",
            "uri"    : "/product/:id",
            "fields" : ["name", "description", "unitSize", "deleted"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/product-price",
            "expand" : "prices",
            "fields" : ["productId", "priceCatId", "price", "status"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/product-limit",
            "expand" : "limits",
            "fields" : ["productId", "categoryId", "limit", "status"]
        },
        {
            "id"     : 4,
            "method" : "DELETE",
            "uri"    : "/product-price/product/:id",
            "fields" : []
        },
        {
            "id"     : 5,
            "method" : "DELETE",
            "uri"    : "/product-limit/product/:id",
            "fields" : []
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["limits"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 5,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "productId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "productId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "source": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["limits"]
                }
            ]
        },
        {
            "source": 4,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 5,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Soft-delete a product.
# -----------------------------------------------------------------------------
DELETE /product/:id                  --

        update product set deleted = true
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Recover a deleted product.
# -----------------------------------------------------------------------------
PATCH  /product/recover/:id          --

        update product set deleted = false
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get all available price information.
# -----------------------------------------------------------------------------
GET    /product-price                >>  

        ( price
        , priceCatId
        , productId
        , priceCategory ) 
        
        select product_price.price
             , product_price.price_cat_id
             , product_price.product_id
             , product_price_category.name 
        from product_price 
          join product_price_category 
            on product_price_category.id = product_price.price_cat_id 

# -----------------------------------------------------------------------------
#      Insert a product price.
# -----------------------------------------------------------------------------
POST   /product-price                <>  

        insert into product_price 
          ( product_id
          , price_cat_id
          , price
          ) values 
          ( {{productId}}
          , {{priceCatId}}
          , {{price}}
          )

# -----------------------------------------------------------------------------
#      Delete all product price information for a product.
# -----------------------------------------------------------------------------
DELETE /product-price/product/:id    --  

        delete from product_price
          where product_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Delete all product price information for a price category.
# -----------------------------------------------------------------------------
DELETE /product-price/category/:id   --  

        delete from product_price
          where price_cat_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Get all product load limit values.
# -----------------------------------------------------------------------------
GET    /product-limit                >>

        ( categoryId
        , limit
        , productId
        , weightCategory )

        select product_limit.category_id
             , product_limit.load_limit
             , product_limit.product_id
             , weight_category.name
        from product_limit
          join weight_category
            on weight_category.id = product_limit.category_id

# -----------------------------------------------------------------------------
#      Insert a product load limit.
# -----------------------------------------------------------------------------
POST   /product-limit                <>  

        insert into product_limit 
          ( product_id
          , category_id
          , load_limit
          ) values 
          ( {{productId}}
          , {{categoryId}}
          , {{limit}}
          )

# -----------------------------------------------------------------------------
#      Delete all product load limit values for a product.
# -----------------------------------------------------------------------------
DELETE /product-limit/product/:id    --  

        delete from product_limit
          where product_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Delete all product load limit values associated with a weight class.
# -----------------------------------------------------------------------------
DELETE /product-limit/category/:id   --  

        delete from product_limit
          where category_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Get all fuel activity data for a vehicle.
# -----------------------------------------------------------------------------
GET    /fuel-activity/vehicle/:id    >>  

        select id
             , amount
             , created
             , meter_reading
        from vehicle_fuel_activity
          where vehicle_id = {{:id}}

# -----------------------------------------------------------------------------
#      Create a new fuel activity log entry.
# -----------------------------------------------------------------------------
POST   /fuel-activity/vehicle/:id    <>  

        insert into vehicle_fuel_activity
          ( created
          , amount
          , meter_reading
          , vehicle_id
          ) values 
          ( 'now()'
          , {{amount}}
          , {{meterReading}}
          , {{:id}}
          )

# -----------------------------------------------------------------------------
#      Delete all fuel activity data for a vehicle.
# -----------------------------------------------------------------------------
DELETE /fuel-activity/vehicle/:id    --  

        delete from vehicle_fuel_activity
          where vehicle_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Get all maintenance activity data for a vehicle.
# -----------------------------------------------------------------------------
GET    /maintenance-data/vehicle/:id >>  

        select id
             , description
             , start_time
             , end_time
             , meter_reading
             , activity
        from vehicle_maintenance_activity
          where vehicle_id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert a maintenance activity.
# -----------------------------------------------------------------------------
POST   /maintenance-data/vehicle/:id <>  

        insert into vehicle_maintenance_activity
          ( description
          , start_time
          , end_time
          , meter_reading
          , activity
          , vehicle_id
          ) values 
          ( {{description}}
          , {{startTime}}
          , null
          , {{meterReading}}
          , {{activity}} 
          , {{vehicleId}} 
          )

# -----------------------------------------------------------------------------
#      Set end time for a vehicle's most recent, currently open maintenance 
#      activity.
# -----------------------------------------------------------------------------
PATCH  /maintenance/end/vehicle/:id  ><  

        update vehicle_maintenance_activity set end_time = {{endTime}} 
          where id = ( select id 
                       from vehicle_maintenance_activity 
                         where vehicle_id = {{:id}}
                           and end_time is null
                       order by id desc
                         limit 1 )

# -----------------------------------------------------------------------------
#      Create a maintenance activity for a vehicle and set the vehicle's status 
#      to 'in_maintenance'.
# -----------------------------------------------------------------------------
POST   /!maintenance/vehicle/:id     |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/maintenance-data/vehicle/:id",
            "fields" : [":id", "description", "startTime", "meterReading", "activity", "vehicleId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/vehicle/status/maintenance",
            "fields" : ["vehicleId", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "vehicleId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Complete the most recent, open maintenance activity for a vehicle and 
#      set the vehicle's status to 'active'.
# -----------------------------------------------------------------------------
PATCH  /!maintenance/complete/vehicle/:id  |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/maintenance/end/vehicle/:id",
            "fields" : [":id", "endTime"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/vehicle/status/active",
            "fields" : ["vehicleId", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "vehicleId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get the meter reading of the most recent fuel or maintenance activity
#      for a vehicle.
# -----------------------------------------------------------------------------
GET    /meter-reading/vehicle/:id    -> 

        ( meterReading )
                                                                              
        select GREATEST (
          ( select meter_reading
            from vehicle_fuel_activity
              where vehicle_id = {{:id}}
            order by meter_reading DESC
              limit 1
          )
        , ( select meter_reading
            from vehicle_maintenance_activity
              where vehicle_id = {{:id}}
            order by meter_reading DESC
              limit 1
          )
        , 0
        )
 
# -----------------------------------------------------------------------------
#      Get all orders.
# -----------------------------------------------------------------------------
GET    /order                        >>

        ( id
        , created
        , customerId
        , lastChange
        , status
        , userId 
        , customerId 
        , customerName 
        , areaId 
        , depotId )

        select order_object.id
             , order_object.created
             , order_object.customer_id
             , order_object.last_change
             , order_object.status
             , order_object.user_id
             , customer.id
             , customer.name
             , customer.area_id
             , area.depot_id
        from order_object
          join customer
            on customer.id = order_object.customer_id
          left join area
            on area.id = customer.area_id
        order by order_object.id

# -----------------------------------------------------------------------------
#      Get all products associated with an order.
# -----------------------------------------------------------------------------
GET    /product/order/:id            >>

        ( id
        , name
        , description
        , unitSize
        , price
        , quantity )

        select product.id
             , product.name
             , product.description
             , product.unit_size
             , order_product.price
             , order_product.quantity
        from order_product
          join product
            on product.id = order_product.product_id
          where order_product.order_id = {{:id}}
        order by
          product.id

# -----------------------------------------------------------------------------
#      Delete all order-product associations for an order.
# -----------------------------------------------------------------------------
DELETE /product/order/:id            --

        delete from order_product
        where order_id = {{:id}}

# -----------------------------------------------------------------------------
#      Get all dispatches.
# -----------------------------------------------------------------------------
GET    /dispatch                     >>

        ( id
        , created
        , depotId
        , status
        , vehicleId 
        , vehicleRegNo
        , vehicleWeightCategory
        , depotName
        , driverId
        , driverUsername
        , driverName )

        select dispatch.id
             , dispatch.created
             , dispatch.depot_id
             , dispatch.status
             , dispatch.vehicle_id
             , vehicle.reg_no
             , weight_category.name
             , depot.name
             , sdrp_user.id
             , sdrp_user.username
             , sdrp_user.name
        from dispatch
          join vehicle
            on vehicle.id = dispatch.vehicle_id
          join weight_category
            on weight_category.id = vehicle.category_id
          join depot
            on depot.id = dispatch.depot_id
          left join sdrp_user
            on sdrp_user.id = vehicle.user_id
        order by dispatch.id

# -----------------------------------------------------------------------------
#      Get activity log for a dispatch.
# -----------------------------------------------------------------------------
GET    /dispatch/:id/activity        >>

        select id
             , created
             , status
        from dispatch_activity
          where dispatch_id = {{:id}}
        order by 
            id

# -----------------------------------------------------------------------------
#      Update the status for a dispatch.
# -----------------------------------------------------------------------------
PATCH  /dispatch/status/:id          ><                                       

        update dispatch set status = {{status}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update the status for an order.
# -----------------------------------------------------------------------------
PATCH  /order/status/:id             ><

        update order_object set status = {{status}} 
                              , last_change = {{datetime}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update the status for all orders within a dispatch.
# -----------------------------------------------------------------------------
PATCH  /dispatch-orders/status/:id   ><                                       

        update order_object set status = {{status}} 
                              , last_change = now()
          where id in ( select order_id
                        from dispatch_order
                          where dispatch_id = {{:id}}
                      )

# -----------------------------------------------------------------------------
#      Create order activity status change log entries for all orders within 
#      a dispatch. 
# -----------------------------------------------------------------------------
POST   /order-activity/dispatch/:id  <>                                       

        insert into order_activity (created, order_id, status)
            select {{datetime}}, order_id, {{status}} 
            from dispatch_order
              where dispatch_id = {{:id}}

# -----------------------------------------------------------------------------
#      Create order activity status change log entry for an order.
# -----------------------------------------------------------------------------
POST   /activity/order/:id  <>                                       

        insert into order_activity (created, order_id, status)
          values ( {{datetime}}, {{:id}}, {{status}} )

# -----------------------------------------------------------------------------
#      Create a dispatch activity log entry.
# -----------------------------------------------------------------------------
POST   /dispatch-activity/:id        <> 

        insert into dispatch_activity (created, dispatch_id, status)
          values ( {{datetime}}
                 , {{:id}}
                 , {{status}} )

# -----------------------------------------------------------------------------
#      Update the status for an order and create an order log entry.
# -----------------------------------------------------------------------------
PATCH  /!order/status/:id            |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/order/status/:id",
            "fields" : [":id", "status", "datetime"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/activity/order/:id",
            "fields" : [":id", "datetime", "status", "return"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Update the status for a dispatch and create associated log entries for
#      the dispatch and all order objects within the dispatch.
# -----------------------------------------------------------------------------
PATCH  /!dispatch/status/:id         |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/dispatch/status/:id",
            "fields" : [":id", "status"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/dispatch-activity/:id",
            "fields" : [":id", "datetime", "status", "return"]
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/dispatch-orders/status/:id",
            "fields" : [":id", "status", "return"]
        },
        {
            "id"     : 4,
            "method" : "POST",
            "uri"    : "/order-activity/dispatch/:id",
            "fields" : [":id", "datetime", "status", "return"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 4,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get all products associated with a dispatch. 
# -----------------------------------------------------------------------------
GET    /product/dispatch/:id         >> 

        ( orderId
        , id
        , deleted
        , description
        , name
        , unitSize 
        , quantity )

        select dispatch_order.order_id
             , product.id 
             , product.deleted
             , product.description
             , product.name
             , product.unit_size
             , order_product.quantity
        from dispatch_order 
          join order_product 
            on order_product.order_id = dispatch_order.order_id 
          join product 
            on product.id = order_product.product_id 
          where dispatch_order.dispatch_id = {{:id}};

# -----------------------------------------------------------------------------
#      Get all orders associated with a dispatch. 
# -----------------------------------------------------------------------------
GET    /order/dispatch/:id           >> 

        ( orderId
        , created
        , customerId
        , lastChange
        , status
        , userId
        , customerName 
        , customerPhone 
        , areaName )

        select dispatch_order.order_id
             , order_object.created
             , order_object.customer_id
             , order_object.last_change
             , order_object.status
             , order_object.user_id
             , customer.name
             , customer.phone
             , area.name
        from dispatch_order 
          join order_object
            on order_object.id = dispatch_order.order_id 
          join customer
            on customer.id = order_object.customer_id
          join area
            on area.id = customer.area_id
          where dispatch_order.dispatch_id = {{:id}};

# -----------------------------------------------------------------------------
#      Get all order activity log entries for a collection of orders.
# -----------------------------------------------------------------------------
POST   /activity/order/collection    >>

        select id
             , created
             , order_id
             , status
        from order_activity
        where id in 
            ( {{orders}} )
        order by 
            id

# -----------------------------------------------------------------------------
#      Get the activity log for a specific order.
# -----------------------------------------------------------------------------
GET    /order-activity/:id           >>

        select id
             , created
             , order_id
             , status
        from order_activity
        where order_id = {{:id}}
        order by 
            id

# -----------------------------------------------------------------------------
#      Get all order activity log entries for the collection of orders 
#      associated with a dispatch.
# -----------------------------------------------------------------------------
GET    /order-activity/dispatch/:id  >>

        select id
             , created
             , order_id
             , status
        from order_activity
        where order_id in 
            ( select order_id 
              from dispatch_order 
              where dispatch_id = {{:id}}
            )
        order by 
            id

# -----------------------------------------------------------------------------
#      Get today's total order value generated by a user.
# -----------------------------------------------------------------------------
GET    /performance/total-today/user/:id  ->

        select COALESCE(SUM((order_product.price::float)*order_product.quantity), 0) as total 
        from order_object 
          join order_product 
            on order_product.order_id = order_object.id 
        where order_object.created > now()::date 
          and order_object.user_id = {{:id}}

# -----------------------------------------------------------------------------
#      Get the total number of unique customers for which a user has generated 
#      orders today.
# -----------------------------------------------------------------------------
GET    /performance/customer-count/user/:id  ->

        select COUNT(distinct customer.id) as customers
        from order_object 
          join customer 
            on customer.id = order_object.customer_id 
        where order_object.created > now()::date 
          and order_object.user_id = {{:id}}

# -----------------------------------------------------------------------------
#      Calculate commission value for a user based on orders confirmed today.
# -----------------------------------------------------------------------------
GET    /performance/commission-value/user/:id  ->

        select COALESCE(SUM(order_product.quantity*(role_commission.value::float)), 0) as commission 
        from order_activity 
          join order_object 
            on order_object.id = order_activity.order_id 
          join order_product 
            on order_product.order_id = order_object.id 
          join role_commission 
            on role_commission.product_id = order_product.product_id 
        where order_activity.created > now()::date 
          and order_activity.status = 'confirmed' 
          and order_object.user_id = {{:id}} 
          and role_commission.role = 
            ( select role 
              from sdrp_user 
              where id = {{:id}} )

# -----------------------------------------------------------------------------
#      Get all role-product commission values.
# -----------------------------------------------------------------------------
GET    /role-commission/:from/:to      >>

        ( id
        , productId
        , role
        , value )

        select role_commission.id
             , role_commission.product_id
             , role_commission.role
             , role_commission.value
        from role_commission
        where product_id in 
            ( select id 
              from product 
              order by 
                id
              limit ({{:to}}-{{:from}} + 1)
              offset ({{:from}} - 1)
            )
        order by
          product_id
            
# -----------------------------------------------------------------------------
#      Update commission values for a product.
#
#      {
#        "depotManager"   : number,
#        "callCenter"     : number,
#        "fieldStaff"     : number,
#        "driver  "       : number
#      }
# -----------------------------------------------------------------------------
PUT    /!role-commission/product/:id     |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/role-commission/product/:id",
            "fields" : [":id"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/role-commission/product/:id",
            "fields" : [":id", "depotManager", "callCenter", "fieldStaff", "driver", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Delete all commission values for a product.
# -----------------------------------------------------------------------------
DELETE /role-commission/product/:id      --

        delete from role_commission where product_id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert commission values for a product.
# -----------------------------------------------------------------------------
POST   /role-commission/product/:id      ><

        insert into role_commission (product_id, role, value)
          values ( {{:id}} , 'field-staff'   , {{fieldStaff}}   ) 
               , ( {{:id}} , 'call-center'   , {{callCenter}}   ) 
               , ( {{:id}} , 'depot-manager' , {{depotManager}} ) 
               , ( {{:id}} , 'driver'        , {{driver}}       )

# -----------------------------------------------------------------------------
#        Get vehicle load for an order.
# -----------------------------------------------------------------------------
GET      /order-load/vehicle/:vehicle/order/:order    ->

          SELECT weight 
          FROM order_weight 
          WHERE order_id = {{:order}} 
            AND category_id = {{:vehicle}}

# -----------------------------------------------------------------------------
#      Calculate total vehicle load incurred by a collection of orders.
# -----------------------------------------------------------------------------
POST   /order-load/vehicle/:id           ->

        ( load )

        select COALESCE(SUM(order_product.quantity / product_limit.load_limit :: float), 0)
        from order_object 
          join order_product 
            on order_product.order_id = order_object.id 
          join product_limit 
            on product_limit.product_id = order_product.product_id 
        where order_object.id in ( {{orderIds}} ) 
          and product_limit.category_id = 
            ( select category_id 
              from vehicle 
              where id = {{:id}} ) 

# -----------------------------------------------------------------------------
#      Create a dispatch object.
# -----------------------------------------------------------------------------
POST   /dispatch                         <> 

        insert into dispatch (created, depot_id, status, vehicle_id)
          values ( {{datetime}} 
                 , ( select depot_id from vehicle where id = {{vehicleId}} )
                 , 'queued'
                 , {{vehicleId}}
                 )

# -----------------------------------------------------------------------------
#      Insert a dispatch order pair.
# -----------------------------------------------------------------------------
POST   /dispatch-order                   <>

        insert into dispatch_order (dispatch_id, order_id)
          values ( {{dispatchId}}, {{orderId}} )

# -----------------------------------------------------------------------------
#      Create a dispatch, insert dispatch orders and create relevant activity 
#      log entries.
#
#      {
#        "datetime"  : string,
#        "vehicleId" : number,
#        "orders"    : [
#              {
#                "orderId" : number,
#              }
#        ]
#      }
# -----------------------------------------------------------------------------
POST   /!dispatch                        |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/dispatch",
            "fields" : ["vehicleId", "datetime"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/dispatch-order",
            "expand" : "orders",
            "fields" : ["dispatchId", "orderId"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/dispatch-activity/:id",
            "fields" : [":id", "datetime", "status", "return"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/dispatch-orders/status/:id",
            "fields" : [":id", "status", "return"]
        },
        {
            "id"     : 5,
            "method" : "POST",
            "uri"    : "/order-activity/dispatch/:id",
            "fields" : [":id", "datetime", "status", "return"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["orders"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["status", "queued"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["status", "queued"]
                }
            ]
        },
        {
            "destination": 5,
            "filters": [],
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["status", "queued"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "dispatchId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                },
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 4,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                },
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 5,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                },
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}
 
# -----------------------------------------------------------------------------
#      Get average order total for a given customer.
# -----------------------------------------------------------------------------
GET    /order-average/customer/:id        ->

        ( average )

        SELECT COALESCE(SUM(order_product.quantity*order_product.price :: float) / 
            ( SELECT COUNT(id) 
              FROM order_object 
              WHERE customer_id = {{:id}}
            ), 0) 
        FROM order_object 
          JOIN order_product 
            ON order_product.order_id = order_object.id 
        WHERE customer_id = {{:id}}

# -----------------------------------------------------------------------------
#      Get average time inbetween orders for a customer.
# -----------------------------------------------------------------------------
GET    /time-average/customer/:id        ->

        ( hours )

        select COALESCE(extract(epoch from AVG(difference)/3600), 0) from 
            ( select created - lag(created) 
                over (order by created) 
                  as difference 
              from order_object 
              where customer_id = {{:id}} 
            ) t


# -----------------------------------------------------------------------------
#      Set last change timestamp for an order.
# -----------------------------------------------------------------------------
# PATCH  /order/last-change/:id            <>

# # -----------------------------------------------------------------------------
# #      Update an order object.
# # -----------------------------------------------------------------------------
# PUT    /!order/:id                       |>
# {
#     "processors": [
#         {
#             "id"     : 1,
#             "method" : "DELETE",
#             "uri"    : "product/order/:id",
#             "fields" : []
#         },
#         {
#             "id"     : 2,
#             "method" : "DELETE",
#             "uri"    : "order-weight/:id",
#             "fields" : []
#         },
#         {
#             "id"     : 3,
#             "method" : "POST",
#             "uri"    : "/!order-product",
#             "expand" : "products",
#             "fields" : ["status", "orderId", "productId", "quantity", "depotId"]
#         },
#         {
#             "id"     : 4,
#             "method" : "POST",
#             "uri"    : "order-activity",
#             "fields" : ["datetime", "orderId", "status"]
#         },
#         {
#             "id"     : 5,
#             "method" : "POST",
#             "uri"    : "!order-weight/:id",
#             "fields" : ["status", ":id", "products"]
#         }
#     ],
#     "connections": [
#         {
#             "destination"  : 1,
#             "transformers" : [],
#             "filters"      : []
#         },
#         {
#             "destination"  : 2,
#             "transformers" : [],
#             "filters"      : []
#         }
#     ]
# }

# -----------------------------------------------------------------------------
#      Create an order object.
# -----------------------------------------------------------------------------
POST   /order                            <>

        insert into order_object (created, customer_id, last_change, status, user_id)
          values ( {{datetime}}
                 , {{customerId}}
                 , {{datetime}}
                 , 'placed'
                 , {{userId}} )

# -----------------------------------------------------------------------------
#      Insert an order product pair.
# -----------------------------------------------------------------------------
POST   /order-product                    <>

        insert into order_product (order_id, price, product_id, quantity, return)
          values ( {{orderId}}
                 , ( select product_price.price 
                     from customer 
                       join product_price 
                         on product_price.price_cat_id = customer.price_cat_id 
                      where customer.id = 1 
                        and product_price.product_id = 2 
                   )
                 , {{productId}}
                 , {{quantity}} 
                 , 0 )

# -----------------------------------------------------------------------------
#      Insert an order product pair if there is sufficient stock available
#      of the product in the given depot.
# -----------------------------------------------------------------------------
POST   /!order-product                   |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "stock/available/remove",
            "fields" : ["quantity", "depotId", "productId"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "order-product",
            "fields" : ["status", "orderId", "productId", "quantity"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["status", "quantity", "depotId", "productId"]
        }
    ],
    "connections": [
        {
            "destination"  : 1,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 2,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 3,
            "transformers" : [
                {
                    "action"    : "bind",
                    "arguments" : ["type", "order-placed"]
                }
             ],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 2,
            "transformers" : [],
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "equalTo",
                    "value"     : 1
                }
            ]
        },
        {
            "source"       : 1,
            "destination"  : 3,
            "transformers" : [],
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "equalTo",
                    "value"     : 1
                }
            ]
        },
        {
            "source"       : 1,
            "transformers" : [
                {
                    "action"    : "bind",
                    "arguments" : ["status", false]
                },
                {
                    "action"    : "bind",
                    "arguments" : ["error", "INSUFFICIENT_STOCK"]
                },
                {
                    "action"    : "bind",
                    "arguments" : ["responseCode", 500]
                },
                {
                    "action"    : "bind",
                    "arguments" : ["message", "Insufficient stock."]
                }
            ],
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "equalTo",
                    "value"     : 0
                }
            ]
        },
        {
            "source"       : 1,
            "transformers" : [],
            "filters"      : []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Create an order.
#
#      {
#        "datetime"    : string,
#        "customerId"  : number,
#        "depotId"     : number,
#        "userId"      : number,
#        "contactType" : string,
#        "products"    : [
#              {
#                "quantity"  : number,
#                "productId" : number
#              }
#        ]
#      }
# -----------------------------------------------------------------------------
POST   /!order                           |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/order",
            "fields" : ["datetime", "customerId", "userId"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/!order-product",
            "expand" : "products",
            "fields" : ["orderId", "productId", "quantity", "depotId"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/activity/customer/:id",
            "fields" : ["datetime", ":id", "userId", "contactType", "entityId"]
        },
        {
            "id"     : 4,
            "method" : "POST",
            "uri"    : "order-activity",
            "fields" : ["datetime", "orderId", "status"]
        },
        {
            "id"     : 5,
            "method" : "POST",
            "uri"    : "!order-weight/:id",
            "fields" : [":id", "products"]
        }
    ],
    "connections": [
        {
            "destination"  : 1,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 2,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 3,
            "transformers" : [
                {
                    "action": "bind",
                    "arguments": ["description", "A customer order was placed."]
                },
                {
                    "action": "bind",
                    "arguments": ["kind", "order-placed"]
                },
                {
                    "action": "rename",
                    "arguments": ["customerId", ":id"]
                }
             ],
            "filters"      : []
        },
        {
            "destination"  : 4,
            "transformers" : [
                {
                    "action": "bind",
                    "arguments": ["status", "placed"]
                }
            ],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 2,
            "transformers" : [
                {
                    "action": "rename",
                    "arguments": ["id", "orderId"]
                },
                {
                    "action": "include",
                    "arguments": ["orderId", "id", "products", "depotId", "customerId"]
                }
            ],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 3,
            "transformers" : [
                {
                    "action": "rename",
                    "arguments": ["id", "entityId"]
                }
            ],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 4,
            "transformers" : [
                {
                    "action": "include",
                    "arguments": ["orderId"]
                },
                {
                    "action": "rename",
                    "arguments": ["id", "orderId"]
                }
            ],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 5,
            "transformers" : [
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ],
            "filters"      : []
        },
        {
            "source"       : 2,
            "destination"  : 5,
            "filters"      : [],
            "transformers" : [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        },
        {
            "source"       : 1,
            "transformers" : [],
            "filters"      : []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Insert an order activity.
# -----------------------------------------------------------------------------
POST   /order-activity                   <>                                       

        insert into order_activity (created, order_id, status)
            values ( {{datetime}}, {{orderId}}, {{status}} )

# -----------------------------------------------------------------------------
#      Delete all order weight values for an order.
# -----------------------------------------------------------------------------
DELETE /order-weight/:id                 --

        delete from order_weight
        where order_id = {{:id}}

# -----------------------------------------------------------------------------
#      Compute order weight values for an order.
# -----------------------------------------------------------------------------
POST   /order-weight/:id                 <>

        insert into order_weight ( order_id, category_id, weight ) 
            ( select {{:id}} 
                   , id 
                   , ( select COALESCE(sum(order_product.quantity / product_limit.load_limit :: float), 0) 
                       from order_product 
                         join product_limit 
                           on product_limit.product_id = order_product.product_id 
                       where order_product.order_id = {{:id}} 
                         and category_id = weight_category.id
                     ) from weight_category
            )
    
# -----------------------------------------------------------------------------
GET    /least-order-weight/:id           ->

        select ( select COALESCE(sum(order_product.quantity / product_limit.load_limit :: float), 100) 
                 from order_product 
                   join product_limit 
                     on product_limit.product_id = order_product.product_id 
                 where order_product.order_id = {{:id}}
                   and category_id = weight_category.id
               ) as weight 
        from weight_category 
        order by 
          weight 
        limit 
          1

# -----------------------------------------------------------------------------
#
# {
#   "qts": [6,1,3,4],
#   "products": [5,3,8,7]
# }
#
POST   /calculate-least-weight           ->

        select ( with product_quantity (product_id, quantity) 
          as ( select unnest(Array[{{products}}])
                    , unnest(Array[{{qts}}])
             ) select COALESCE(sum(pq.quantity / pl.load_limit :: float), 100) 
               from product_quantity pq 
                 join product_limit pl 
                   on pl.product_id = pq.product_id 
               where pl.category_id = weight_category.id
             ) as weight 
        from weight_category 
        order by 
          weight 
        limit 
          1

# -----------------------------------------------------------------------------
#      Update (delete and insert) order weight values for an order.
# -----------------------------------------------------------------------------
POST   /!order-weight/:id                |>
{
    "processors": [
        {
            "id": 1,
            "method": "DELETE",
            "uri": "order-weight/:id",
            "fields": [":id"]
        },
        {
            "id": 2,
            "method": "POST",
            "uri": "order-weight/:id",
            "fields": [":id", "status"]
        }
    ],
    "connections": [
        {
            "destination"  : 1,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 2,
            "transformers" : [],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 2,
            "transformers" : [],
            "filters"      : []
        },
        {
            "source"       : 2,
            "transformers" : [],
            "filters"      : []
        }
    ]
}

GET     /customer-followup/:days  >>

         ( customerId
         , customerName
         , datetime )

         SELECT c.id
              , c.name
              , MAX(ca.created) 
         FROM customer c 
           JOIN customer_activity ca 
             ON ca.customer_id = c.id 
         WHERE c.is_active = true 
         GROUP BY c.id 
           HAVING MAX(ca.created) < (CURRENT_DATE - INTERVAL '{{:days}} days') :: date

GET     /customer-inactive/:days  >>

         ( customerId
         , customerName
         , datetime )

         SELECT c.id
              , c.name
              , MAX(oo.created) 
         FROM customer c 
           JOIN order_object oo
             ON oo.customer_id = c.id 
         WHERE c.is_active = true 
         GROUP BY c.id 
           HAVING MAX(oo.created) < (CURRENT_DATE - INTERVAL '{{:days}} days') :: date

GET     /customer-visit-followup/:days  >>

         ( customerId
         , customerName
         , datetime )

         SELECT c.id
              , c.name
              , MAX(ca.created) 
         FROM customer c 
           JOIN customer_activity ca 
             ON ca.customer_id = c.id 
         WHERE c.is_active = true 
           AND ca.contact_type = 'visit'
         GROUP BY c.id 
           HAVING MAX(ca.created) < (CURRENT_DATE - INTERVAL '{{:days}} days') :: date

GET    /customer-order-followup  >>

        ( customerId 
        , customerName )

        SELECT customer.id 
             , customer.name
        FROM customer 
          JOIN order_object 
            ON order_object.customer_id = customer.id 
        GROUP BY customer.id 
          HAVING ((now() - MAX(order_object.created)) - (
            ( SELECT AVG(difference) 
              FROM ( SELECT created - lag(created) 
                       OVER (order by created) 
                         AS difference 
                     FROM order_object 
                     WHERE customer_id = customer.id) t))
            ) > interval '0'

GET    /settings/:key  ->

        SELECT value
        FROM settings
        WHERE key = {{:key}}

PUT    /settings/:key  ><

        UPDATE settings
        SET value = {{value}}
        WHERE key = {{:key}}





# -----------------------------------------------------------------------------
#      Move stock from a depot to an order.
# -----------------------------------------------------------------------------
PATCH  /stock-movement/depot/:depot/order/:order  ><

        WITH insert AS
          ( INSERT INTO depot_stock_transaction
            ( product_id
            , depot_id
            , quantity 
            , time
            , transaction_type ) 
            ( SELECT {{productId}}
                   , {{:depot}}
                   , (-{{quantity}})
                   , {{datetime}}
                   , {{transactionType}}
              FROM depot_stock 
              WHERE product_id = {{productId}} 
                AND depot_id = {{:depot}} 
                AND quantity >= {{quantity}}
            ) 
            RETURNING {{productId}}, {{:order}}, {{quantity}}, {{datetime}} :: timestamp, {{transactionType}}
          ) INSERT INTO order_stock_transaction
            ( product_id
            , order_id
            , quantity 
            , time
            , transaction_type )
            ( SELECT * FROM insert )

DELETE /stock/depot/:depot  --

        INSERT INTO depot_stock
          ( product_id, depot_id, quantity )
        VALUES ( {{productId}}
               , {{:depot}}
               , (-{{quantity}})
               )

POST   /stock/order/:order  <>

        INSERT INTO order_stock
          ( product_id, order_id, quantity )
        VALUES ( {{productId}}
               , {{:order}}
               , {{quantity}}
               )

PATCH  /merge/depot-stock  ><

        WITH inserted AS 
          ( INSERT INTO depot_stock 
            ( product_id
            , depot_id
            , quantity ) 
            ( SELECT product_id
                   , depot_id
                   , sum(quantity) 
              FROM depot_stock 
              GROUP BY product_id
                     , depot_id
            ) RETURNING id
          ) DELETE FROM depot_stock 
            WHERE id NOT IN 
              ( SELECT id 
                FROM inserted )

PATCH  /merge/order-stock  ><

        WITH inserted AS 
          ( INSERT INTO order_stock 
            ( product_id
            , order_id
            , quantity ) 
            ( SELECT product_id
                   , order_id
                   , sum(quantity) 
              FROM order_stock 
              GROUP BY product_id
                     , order_id
            ) RETURNING id
          ) DELETE FROM order_stock 
            WHERE id NOT IN 
              ( SELECT id 
                FROM inserted )

POST   /!stock-movement/depot/:depot/order/:order  |>
{
    "processors": [
        {
            "id"      : 1,
            "method"  : "PATCH",
            "uri"     : "/stock-movement/depot/:depot/order/:order",
            "fields"  : ["productId", "quantity", "transactionType", "datetime"]
        },
        {
            "id"      : 2,
            "method"  : "DELETE",
            "uri"     : "/stock/depot/:depot",
            "fields"  : ["rows", "quantity"]
        },
        {
            "id"      : 3,
            "method"  : "POST",
            "uri"     : "/stock/order/:order",
            "fields"  : ["rows", "quantity"]
        },
        {
            "id"      : 4,
            "method"  : "PATCH",
            "uri"     : "/merge/depot-stock",
            "fields"  : ["status"]
        },
        {
            "id"      : 5,
            "method"  : "PATCH",
            "uri"     : "/merge/order-stock",
            "fields"  : ["status"]
        }
    ],
    "connections": [
        {
            "destination"  : 1,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 2,
            "transformers" : [],
            "filters"      : []
        },
        {
            "destination"  : 3,
            "transformers" : [],
            "filters"      : []
        },
        {
            "source"       : 1,
            "destination"  : 2,
            "transformers" : [],
            "filters"      : [
                {
                    "property": "rows",
                    "predicate": "equalTo",
                    "value": 1
                }
            ]
        },
        {
            "source"       : 1,
            "destination"  : 3,
            "transformers" : [],
            "filters"      : [
                {
                    "property": "rows",
                    "predicate": "equalTo",
                    "value": 1
                }
            ]
        },
        {
            "source"       : 2,
            "destination"  : 4,
            "transformers" : [],
            "filters"      : []
        },
        {
            "source"       : 3,
            "destination"  : 5,
            "transformers" : [],
            "filters"      : []
        },
        {
            "source"       : 1,
            "transformers" : [],
            "filters"      : []
        }
     ]
}

# # -----------------------------------------------------------------------------
# #      Merge depot-stock transactions into unique rows.
# # -----------------------------------------------------------------------------
# PATCH  /merge/depot-stock  ><
# 
#         WITH inserted AS 
#           ( INSERT INTO depot_stock 
#             ( product_id
#             , depot_id
#             , quantity ) 
#             ( SELECT product_id
#                    , depot_id
#                    , sum(quantity) 
#               FROM depot_stock 
#               GROUP BY product_id
#                      , depot_id
#             ) RETURNING id
#           ) DELETE FROM depot_stock 
#             WHERE id NOT IN 
#               ( SELECT id 
#                 FROM inserted )
# 
# # -----------------------------------------------------------------------------
# #      Merge order-stock transactions into unique rows.
# # -----------------------------------------------------------------------------
# PATCH  /merge/order-stock  ><
# 
#         WITH inserted AS 
#           ( INSERT INTO order_stock 
#             ( product_id
#             , order_id
#             , quantity ) 
#             ( SELECT product_id
#                    , order_id
#                    , sum(quantity) 
#               FROM order_stock 
#               GROUP BY product_id
#                      , order_id
#             ) RETURNING id
#           ) DELETE FROM order_stock 
#             WHERE id NOT IN 
#               ( SELECT id 
#                 FROM inserted )
# 
# # -----------------------------------------------------------------------------
# #      Get quantity of a product owned by a depot.
# # -----------------------------------------------------------------------------
# GET    /product-quantity/depot/:depot/product/:pid  ->
# 
#         ( quantity )
# 
#         SELECT COALESCE(SUM(quantity), 0)
#         FROM depot_stock
#         WHERE depot_id = {{:depot}}
#           AND product_id = {{:pid}}
# 
# # -----------------------------------------------------------------------------
# #      Get quantity of a product owned by an order.
# # -----------------------------------------------------------------------------
# GET    /product-quantity/order/:id/product/:pid  ->
# 
#         ( quantity )
# 
#         SELECT COALESCE(SUM(quantity), 0)
#         FROM order_stock 
#         WHERE order_id = {{:id}}
#           AND product_id = {{:pid}}
# 
# # -----------------------------------------------------------------------------
# #      Move stock from a depot to an order.
# # -----------------------------------------------------------------------------
# PATCH  /stock-movement/depot/:depot/order/:order  ><
# 
#         WITH insert AS
#           ( INSERT INTO depot_stock 
#             ( product_id
#             , depot_id
#             , quantity ) 
#             ( SELECT {{productId}}
#                    , {{:depot}}
#                    , (-{{quantity}})
#               FROM depot_stock 
#               WHERE product_id = {{productId}} 
#                 AND depot_id = {{:depot}} 
#               HAVING SUM(quantity) >= {{quantity}}
#             ) 
#             RETURNING {{productId}}, {{:order}}, {{quantity}}
#           ) INSERT INTO order_stock
#             ( product_id
#             , order_id
#             , quantity )
#             ( SELECT * FROM insert )
# 
# # -----------------------------------------------------------------------------
# #      Remove stock from a depot.
# # -----------------------------------------------------------------------------
# PATCH  /stock-movement/depot/:depot/nowhere  ><
#  
#         INSERT INTO depot_stock 
#             ( product_id
#             , depot_id
#             , quantity
#             ) ( SELECT {{productId}}
#                      , {{:depot}}
#                      , (-{{quantity}}) 
#                 FROM depot_stock 
#                 WHERE product_id = {{productId}} 
#                   AND depot_id = {{:depot}} 
#                 HAVING SUM(quantity) >= {{quantity}} )
# 
# # -----------------------------------------------------------------------------
# #      Move stock from an order to a depot.
# # -----------------------------------------------------------------------------
# PATCH  /stock-movement/order/:order/depot/:depot  ><
# 
#         WITH insert AS
#           ( INSERT INTO order_stock 
#             ( product_id
#             , order_id
#             , quantity ) 
#             ( SELECT {{productId}}
#                    , {{:order}}
#                    , (-{{quantity}})
#               FROM order_stock 
#               WHERE product_id = {{productId}} 
#                 AND order_id = {{:order}} 
#               HAVING SUM(quantity) >= {{quantity}}
#             ) 
#             RETURNING {{productId}}, {{:depot}}, {{quantity}}
#           ) INSERT INTO depot_stock
#             ( product_id
#             , depot_id
#             , quantity )
#             ( SELECT * FROM insert )
# 
# # -----------------------------------------------------------------------------
# #      Move stock from one order to another.
# # -----------------------------------------------------------------------------
# PATCH  /stock-movement/order/:a/order/:b  ><
# 
#         WITH insert AS
#           ( INSERT INTO order_stock 
#             ( product_id
#             , order_id
#             , quantity ) 
#             ( SELECT {{productId}}
#                    , {{:a}}
#                    , (-{{quantity}})
#               FROM order_stock 
#               WHERE product_id = {{productId}} 
#                 AND order_id = {{:a}} 
#               HAVING SUM(quantity) >= {{quantity}}
#             ) 
#             RETURNING {{productId}}, {{:b}}, {{quantity}}
#           ) INSERT INTO order_stock
#             ( product_id
#             , order_id
#             , quantity )
#             ( SELECT * FROM insert )
# 
# # -----------------------------------------------------------------------------
# #      Add stock to a depot.
# # -----------------------------------------------------------------------------
# PATCH  /stock-movement/nowhere/depot/:depot  ><
# 
#         INSERT INTO depot_stock
#             ( product_id
#             , depot_id
#             , quantity )
#         VALUES 
#             ( {{productId}}
#             , {{:depot}}
#             , {{quantity}}
#             )
# 
