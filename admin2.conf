# -----------------------------------------------------------------------------
#      Authenticate a user.
# -----------------------------------------------------------------------------
GET    /user/:username/:password     -> 
                                                                              
        select id
             , username
             , name
             , role
             , password
        from sdrp_user
          where sdrp_user.username = {{:username}}
            and sdrp_user.password = {{:password}}

# -----------------------------------------------------------------------------
#      Retrieve all users.
# -----------------------------------------------------------------------------
GET    /user/all                     >>  ( id
                                         , username
                                         , name
                                         , role
                                         , depotId
                                         , depotName )         

        select sdrp_user.id                                                  
             , sdrp_user.username                                            
             , sdrp_user.name                                                
             , sdrp_user.role
             , depot.id
             , depot.name
        from sdrp_user                                                       
          left join depot 
            on depot.id = sdrp_user.depot_id
        order by                                                             
          sdrp_user.id

# -----------------------------------------------------------------------------
#      Update a user.
# -----------------------------------------------------------------------------
PUT    /user/:id                     >< 

        update sdrp_user set name     = {{name}}                                     
                           , depot_id = {{depotId}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert a new user.
# -----------------------------------------------------------------------------
POST   /user                         <> 

        insert into sdrp_user (name, username, password, role, depot_id)
          values ( {{name}}
                 , {{username}}
                 , {{password}}
                 , {{role}}
                 , {{depotId}} )

# -----------------------------------------------------------------------------
#      Change a user's password.
# -----------------------------------------------------------------------------
PATCH  /user/:id/password            ><

        update sdrp_user set password = {{password}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a user.
# -----------------------------------------------------------------------------
DELETE /user/:id                     --                                       

        delete from sdrp_user
          where id = {{:id}}
            and id <> 1              # root user cannot be deleted

# -----------------------------------------------------------------------------
#      Retrieve all depots.
# -----------------------------------------------------------------------------
GET    /depot                        >>                                       

        ( id
        , latitude
        , longitude
        , name
        , regionId
        , regionName )
                                                                              
        select depot.id
             , depot.latitude
             , depot.longitude
             , depot.name
             , depot.region_id
             , region.name
        from depot                                                           
          join region 
            on region.id = depot.region_id
        order by 
          depot.id

# -----------------------------------------------------------------------------
#      Update a depot.
# -----------------------------------------------------------------------------
PUT    /depot/:id                    ><
        
        update depot set latitude  = {{latitude}}
                       , longitude = {{longitude}}
                       , name      = {{name}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Detach the currently assigned depot manager from a depot.
# -----------------------------------------------------------------------------
DELETE /depot-manager/~/depot/:id    --                                       

        update sdrp_user set depot_id = NULL 
          where depot_id = {{:id}}  
            and role = 'depot-manager'

# -----------------------------------------------------------------------------
#      Assign a depot manager to a depot.
# -----------------------------------------------------------------------------
PATCH  /depot-manager/~/depot/:id    ><                                       

        update sdrp_user set depot_id = {{:id}}
          where id = {{userId}}
            and role = 'depot-manager'

# -----------------------------------------------------------------------------
#      Delete all area associations for a depot.
# -----------------------------------------------------------------------------
DELETE /area/~/depot/:id             --

        update area set depot_id = null 
          where depot_id = {{:id}}

# -----------------------------------------------------------------------------
#      Assign a depot to a collection of areas.
# -----------------------------------------------------------------------------
PATCH  /area/~/depot/:id             ><

        update area set depot_id = {{:id}}
          where area.id in 
            ( {{areas}} )

# -----------------------------------------------------------------------------
#      Create a depot.
# -----------------------------------------------------------------------------
POST   /depot                        <>                                       

        insert into depot 
          ( name
          , latitude
          , longitude
          , region_id
          ) values
          ( {{name}}
          , {{latitude}}
          , {{longitude}}
          , {{regionId}} )

# -----------------------------------------------------------------------------
#      Create a depot and its connected resources.
#
#      {
#        "name"           : string,
#        "latitude"       : number,
#        "longitude"      : number,
#        "areas"          : array,
#        "depotManagerId" : number,
#        "regionId"       : number
#      }
# -----------------------------------------------------------------------------
POST   /!depot                       |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/depot",
            "fields" : ["name", "latitude", "longitude", "regionId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : ["userId"]
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/area/~/depot/:id",
            "fields" : ["areas"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["depotManagerId", "userId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", ":id"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Update a depot and its connected resources.
#
#      {
#        "name"           : string,
#        "latitude"       : number,
#        "longitude"      : number,
#        "areas"          : array,
#        "depotManagerId" : number
#      }
# -----------------------------------------------------------------------------
PUT    /!depot/:id                   |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PUT",
            "uri"    : "/depot/:id",
            "fields" : ["name", "latitude", "longitude"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : []
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : ["userId"]
        },
        {
            "id"     : 4,
            "method" : "DELETE",
            "uri"    : "area/~/depot/:id",
            "fields" : []
        },
        {
            "id"     : 5,
            "method" : "PATCH",
            "uri"    : "area/~/depot/:id",
            "fields" : ["areas"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["depotManagerId", "userId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 5,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 5,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#       Delete a depot.
# -----------------------------------------------------------------------------
DELETE  /depot/:id                    --                                       

         delete from depot 
           where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a depot and its connected resources. 
# -----------------------------------------------------------------------------
DELETE /!depot/:id                   |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/depot-manager/~/depot/:id",
            "fields" : []
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/area/~/depot/:id",
            "fields" : ["status"]
        },
        {
            "id"     : 3,
            "method" : "DELETE",
            "uri"    : "/depot/:id",
            "fields" : ["status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Retrieve all areas.
# -----------------------------------------------------------------------------
GET    /area                         >>                                       

        ( id
        , regionId
        , name
        , depotId
        , regionName )
                                                                              
        select area.id                                                            
             , area.region_id                                                     
             , area.name                                                          
             , area.depot_id                                                      
             , region.name
        from area                                                            
          join region 
            on region.id = area.region_id
        order by 
          area.id

# -----------------------------------------------------------------------------
#      Create a new area.
# -----------------------------------------------------------------------------
POST   /area                         <>                                       
                                                                              
        insert into area                                                     
          ( region_id, name, depot_id )                                      
        values                                                               
          ( {{regionId}}                                                     
          , {{name}}                                                         
          , {{depotId}}                                                      
          )                        

# -----------------------------------------------------------------------------
#      Delete an area.
# -----------------------------------------------------------------------------
DELETE /area/:id                     --                                       
                                                                              
        delete from area                                                     
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update an area.
# -----------------------------------------------------------------------------
PUT    /area/:id                     ><                                       
                                                                              
        update area set name  = {{name}}                                     
                  , region_id = {{regionId}}                                 
                  , depot_id  = {{depotId}}                                  
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update an area and its connected resources.
#
#      {
#        "name"           : string,
#        "depotId"        : number,
#        "regionId"       : number,
#        "fieldstaffUser" : number | null,
#        "callcenterUser" : number | null
#      }
# -----------------------------------------------------------------------------
PUT    /!area/:id                    |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PUT",
            "uri"    : "/area/:id",
            "fields" : ["name", "regionId", "depotId"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/area/:id/~/user",
            "fields" : ["status"]
        },
        {
            "id"     : 3,
            "method" : "PATCH",
            "uri"    : "/area/:id/~/field-staff",
            "fields" : ["status", "userId"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/area/:id/~/call-center",
            "fields" : ["status", "userId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 4,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id", "userId"]
                },
                {
                    "action": "rename",
                    "arguments": ["fieldstaffUser", "userId"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": [":id", "userId"]
                },
                {
                    "action": "rename",
                    "arguments": ["callcenterUser", "userId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Delete an area and its connected resources.
# -----------------------------------------------------------------------------
DELETE /!area/:id                    |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/area/:id/~/user",
            "fields" : []
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/area/:id",
            "fields" : ["status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Retrieve all area-user associations.
# -----------------------------------------------------------------------------
GET    /area-user                    >>                                       

        ( areaId
        , id
        , username
        , name
        , role )

        select area_user.area_id
             , sdrp_user.id
             , sdrp_user.username
             , sdrp_user.name
             , sdrp_user.role
        from area_user
          join sdrp_user
            on sdrp_user.id = area_user.user_id

# -----------------------------------------------------------------------------
#      Set role assignments for an area.
# -----------------------------------------------------------------------------
PATCH  /area/:id/~/:role             ><                                       

        insert into area_user
          ( user_id, area_id )                                               
          ( select {{userId}}                                                
                 , {{:id}}                                                   
            from sdrp_user                                                   
              where role = {{:role}}
                and id   = {{userId}}                                          
          )

# -----------------------------------------------------------------------------
#      Delete all role assignments for an area.
# -----------------------------------------------------------------------------
DELETE /area/:id/~/user              --                                       

        delete from area_user
          where area_id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all regions.
# -----------------------------------------------------------------------------
GET    /region                       >>  

        select id
             , name
        from region 
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new region.
# -----------------------------------------------------------------------------
POST   /region                       <>  

        insert into region 
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a region.
# -----------------------------------------------------------------------------
PUT    /region/:id                   ><  

        update region set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a region.
# -----------------------------------------------------------------------------
DELETE /region/:id                   --                                       
                                                                              
        delete from region
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all vehicles.
# -----------------------------------------------------------------------------
GET    /vehicle                      >>  

        ( id
        , regNo
        , depotId
        , driverId
        , isAvailable
        , make
        , model
        , status
        , weightCategory
        , weightCatId
        , driverName
        , driverUsername 
        , depot )

        select vehicle.id
             , vehicle.reg_no
             , vehicle.depot_id
             , vehicle.user_id
             , vehicle.is_available
             , vehicle.make
             , vehicle.model
             , vehicle.status
             , weight_category.name
             , vehicle.category_id
             , sdrp_user.name
             , sdrp_user.username
             , depot.name
        from vehicle 
          left join sdrp_user 
            on sdrp_user.id = vehicle.user_id
          join weight_category
            on weight_category.id = vehicle.category_id
          join depot
            on depot.id = vehicle.depot_id
        order by 
          vehicle.id

# -----------------------------------------------------------------------------
#      Create a new vehicle.
# -----------------------------------------------------------------------------
POST   /vehicle                      <>
                                                                              
        insert into vehicle
          ( reg_no
          , depot_id
          , user_id
          , is_available
          , make
          , model
          , status
          , category_id 
          ) values                                                               
          ( {{regNo}}          
          , {{depotId}}
          , {{userId}}
          , {{isAvailable}}
          , {{make}}
          , {{model}}
          , {{status}}
          , {{categoryId}}
          )                        

# -----------------------------------------------------------------------------
#      Update a vehicle.
# -----------------------------------------------------------------------------
PUT    /vehicle/:id                  ><
        
        update vehicle set reg_no       = {{regNo}}
                         , depot_id     = {{depotId}}
                         , user_id      = {{userId}}
                         , is_available = {{isAvailable}}
                         , make         = {{make}}
                         , model        = {{model}}
                         , status       = {{status}}
                         , category_id  = {{categoryId}}
          where id = {{:id}}

# -----------------------------------------------------------------------------
#       Set the status to 'in_maintenance' for a vehicle.
# -----------------------------------------------------------------------------
PATCH   /vehicle/status/maintenance  ><                                       

        update vehicle set status = 'in_maintenance'
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#       Set the status to 'active' for a vehicle.
# -----------------------------------------------------------------------------
PATCH   /vehicle/status/active       ><                                       

        update vehicle set status = 'active'
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#       Reset driver assignment for a vehicle.
# -----------------------------------------------------------------------------
PATCH   /vehicle/driver/null         --                                       

        update vehicle set user_id = null
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#      Assign a driver to a vehicle.
# -----------------------------------------------------------------------------
PATCH  /vehicle/driver               ><                                       

        update vehicle set user_id = {{driverId}} 
          where id = {{vehicleId}}

# -----------------------------------------------------------------------------
#      Remove any existing vehicle assignments for a driver.
# -----------------------------------------------------------------------------
DELETE /driver/~/vehicle             --                                       

        update vehicle set user_id = null
          where user_id = {{driverId}}

# -----------------------------------------------------------------------------
#      Assign a driver to a vehicle and remove any previous vehicle assignment.
# -----------------------------------------------------------------------------
PATCH  /!vehicle/driver              |>                                       
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/driver/~/vehicle",
            "fields" : ["driverId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/vehicle/driver",
            "fields" : ["driverId", "vehicleId", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
} 

# -----------------------------------------------------------------------------
#      Delete a vehicle.
# -----------------------------------------------------------------------------
DELETE /vehicle/:id                  --                                       
                                                                              
        delete from vehicle
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle and any associated fuel log activity entries.
# -----------------------------------------------------------------------------
DELETE /!vehicle/:id                 |>                                       
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/fuel-activity/vehicle/:id",
            "fields" : [":id"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/vehicle/:id",
            "fields" : [":id", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["status"]
                }
            ]
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get a list of all vehicle weight categories.
# -----------------------------------------------------------------------------
GET    /weight-category              >>  

        select id
             , name
        from weight_category 
        order by 
          weight_category.id

# -----------------------------------------------------------------------------
#      Insert a new vehicle weight category.
# -----------------------------------------------------------------------------
POST   /weight-category              <>  

        insert into weight_category 
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a vehicle weight category.
# -----------------------------------------------------------------------------
PUT    /weight-category/:id          ><  

        update weight_category set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle weight category.
# -----------------------------------------------------------------------------
DELETE /weight-category/:id          --                                       

        delete from weight_category
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle weight category and all associated product load limits.
# -----------------------------------------------------------------------------
DELETE /!weight-category/:id         |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/product-limit/category/:id",
            "fields" : [":id"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/weight-category/:id",
            "fields" : [":id", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get stock availability information for a depot. 
# -----------------------------------------------------------------------------
GET    /stock/depot/:id              >>  

        ( productId
        , actual
        , available
        , productName ) 
        
        select stock.product_id
             , stock.actual
             , stock.available
             , product.name 
        from stock 
          join product 
            on product.id = stock.product_id 
          where depot_id = {{:id}} 
        order by 
          stock.id

# -----------------------------------------------------------------------------
#      Increase actual stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/actual/add             ><  

        update stock set actual = actual + {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Increase available stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/available/add          ><  

        update stock set available = available + {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Reduce actual stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/actual/remove          ><  

        update stock set actual = actual - {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Reduce available stock for a product.
# -----------------------------------------------------------------------------
PATCH  /stock/available/remove       ><  

        update stock set available = available - {{quantity}} 
          where depot_id   = {{depotId}} 
            and product_id = {{productId}}

# -----------------------------------------------------------------------------
#      Get all stock activity for a depot. 
# -----------------------------------------------------------------------------
GET    /stock-activity               >>  

        ( id
        , activityType
        , created
        , productId
        , quantity
        , depotId
        , reportDamageType
        , reportDescription 
        , productName )

        select stock_activity.id
             , stock_activity.activity_type
             , stock_activity.created
             , stock_activity.product_id
             , stock_activity.quantity
             , stock_activity.depot_id
             , stock_damage_report.damage_type
             , stock_damage_report.description
             , product.name
        from stock_activity
          left join stock_damage_report 
            on stock_damage_report.activity_id = stock_activity.id
          join product 
            on product.id = stock_activity.product_id
        order by
          stock_activity.id

# -----------------------------------------------------------------------------
#      Create a stock activity log entry.
# -----------------------------------------------------------------------------
POST   /stock-activity               <>

        insert into stock_activity
          ( activity_type
          , created
          , depot_id
          , product_id
          , quantity
          ) values 
          ( {{type}}
          , 'now()'
          , {{depotId}}
          , {{productId}}
          , {{quantity}}
          )

# -----------------------------------------------------------------------------
#      Insert zero actual and available quantity for a product, if stock data 
#      is not already present for the product-depot pair.
# -----------------------------------------------------------------------------
PATCH  /stock/init                   --

        insert into stock 
          ( actual
          , available
          , depot_id
          , product_id 
          ) ( select 0, 0, {{depotId}}, {{productId}}
              where ( select count(id) 
                      from stock 
                        where depot_id   = {{depotId}}
                          and product_id = {{productId}}
                    ) = 0 )

# -----------------------------------------------------------------------------
#      Add product stock to a depot and create an associated log entry.
#
#      {
#        "quantity"       : number,
#        "depotId"        : number,
#        "productId"      : number,
#        "type"           : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!stock/add                   |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/actual/add",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/stock/available/add",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["quantity", "type", "depotId", "productId", "status"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/stock/init",
            "fields" : ["depotId", "productId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Remove product stock from a depot and create an associated activity 
#      log entry.
#
#      {
#        "quantity"       : number,
#        "depotId"        : number,
#        "productId"      : number,
#        "type"           : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!stock/remove                |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/actual/remove",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/stock/available/remove",
            "fields" : ["quantity", "depotId", "productId", "status"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["quantity", "type", "depotId", "productId", "status"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/stock/init",
            "fields" : ["depotId", "productId"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Report damaged product stock for a depot. 
#
#      {
#        "quantity"       : number,
#        "depotId"        : number,
#        "productId"      : number,
#        "type"           : string,
#        "damageType"     : string,
#        "description"    : string
#      }
# -----------------------------------------------------------------------------
PATCH  /!stock/report-damage         |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/actual/remove",
            "fields" : ["quantity", "depotId", "productId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/stock/available/remove",
            "fields" : ["quantity", "depotId", "productId"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/stock-activity",
            "fields" : ["quantity", "type", "depotId", "productId"]
        },
        {
            "id"     : 4,
            "method" : "POST",
            "uri"    : "/stock-damage-report",
            "fields" : ["activityId", "damageType", "description"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "destination": 4,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "activityId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 3,
            "filters": [],
            "transformers": []
        },
        {
            "source": 4,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Retrieve a list of all customers.
# -----------------------------------------------------------------------------
GET    /customer                     >>                                       
                                                                              
        ( id                                                                 
        , name                                                               
        , address                                                      
        , created                                                            
        , latitude                                                           
        , longitude                                                          
        , tin                                                                
        , phone                                                              
        , isActive                                                           
        , areaId                                                             
        , priceCatId                                                         
        , areaName                                                           
        , priceCategory )                                                                    
                                                                             
        select customer.id                                                   
             , customer.name                                                 
             , customer.address                                       
             , customer.created                                              
             , customer.latitude                                             
             , customer.longitude                                            
             , customer.tin                                                  
             , customer.phone                                                
             , customer.is_active                                            
             , customer.area_id                                              
             , customer.price_cat_id                                         
             , area.name                                                     
             , product_price_category.name                                   
        from customer                                                        
          join area                                                          
            on area.id = customer.area_id                                    
          join product_price_category                                        
            on product_price_category.id = customer.price_cat_id             
        order by                                                             
          customer.id

# -----------------------------------------------------------------------------
#      Insert a new customer.
# -----------------------------------------------------------------------------
POST   /customer                     <>                                       
                                                                              
        insert into customer                                                 
          ( name                                                               
          , address                                                     
          , latitude                                                           
          , longitude                                                          
          , tin                                                                
          , phone                                                              
          , is_active                                                          
          , area_id                                                            
          , price_cat_id                                                       
          ) values                                                             
          ( {{name}}                                                         
          , {{address}}                                                
          , {{latitude}}                                                     
          , {{longitude}}                                                    
          , {{tin}}                                                          
          , {{phone}}                                                        
          , {{isActive}}                                                     
          , {{areaId}}                                                       
          , {{priceCatId}}                                                   
          )

# -----------------------------------------------------------------------------
#      Update a customer.
# -----------------------------------------------------------------------------
PUT    /customer/:id                 ><  

        update customer set name           = {{name}}
                          , address        = {{address}}
                          , latitude       = {{latitude}}
                          , longitude      = {{longitude}}
                          , tin            = {{tin}}
                          , phone          = {{phone}}
                          , is_active      = {{isActive}}
                          , area_id        = {{areaId}}
                          , price_cat_id   = {{priceCatId}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get all contact details for a customer.
# -----------------------------------------------------------------------------
GET    /contact/customer/:id         >>                                       
                                                                              
        select customer_id
             , id
             , kind
             , datum 
             , meta                                                            
        from customer_contact                                                
          where customer_id = {{:id}}                                        
        group by                                                             
          id, kind                                                           
        order by 
          id 

# -----------------------------------------------------------------------------
#      Fetch a single contact.
# -----------------------------------------------------------------------------
GET    /contact/:id                  ->  

        ( customerId
        , id
        , kind
        , datum
        , meta
        , customerName )

        select customer_contact.customer_id
             , customer_contact.id
             , customer_contact.kind
             , customer_contact.datum
             , customer_contact.meta                                                            
             , customer.name
         from customer_contact 
           join customer 
             on customer.id = customer_contact.customer_id
          where customer_contact.id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert a new customer contact.
# -----------------------------------------------------------------------------
POST   /contact                      <>  

        insert into customer_contact 
          ( customer_id
          , kind
          , datum
          , meta
          ) values 
          ( {{customerId}}
          , {{kind}}
          , {{datum}}
          , {{meta}}
          )

# -----------------------------------------------------------------------------
#      Update a customer contact.
# -----------------------------------------------------------------------------
PUT    /contact/:id                  ><  

        update customer_contact set customer_id = {{customerId}}
                                  , kind        = {{kind}}
                                  , datum       = {{datum}}
                                  , meta        = {{meta}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a customer contact.
# -----------------------------------------------------------------------------
DELETE /contact/:id                  --

        delete from customer_contact
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all customer complaints.
# -----------------------------------------------------------------------------
GET    /complaint                    >>  

        ( id
        , created
        , customerId
        , description
        , kind
        , resolved
        , customer )

        select complaint.id
             , complaint.created
             , complaint.customer_id
             , complaint.description
             , complaint.kind
             , complaint.resolved
             , customer.name
        from complaint 
          join customer
            on customer.id = complaint.customer_id
        order by 
          complaint.id

# -----------------------------------------------------------------------------
#      Resolve a complaint.
# -----------------------------------------------------------------------------
PATCH  /complaint/resolve/:id        --  

        update complaint set resolved = 'now()' 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get all product price categories.
# -----------------------------------------------------------------------------
GET    /price-category               >>                                       
                                                                              
        select id, name                                                      
        from product_price_category                                          
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new product price category.
# -----------------------------------------------------------------------------
POST   /price-category               <>  

        insert into product_price_category
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a price category.
# -----------------------------------------------------------------------------
PUT    /price-category/:id           ><  
                                                                              
        update product_price_category set name = {{name}}                                     
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a price category.
# -----------------------------------------------------------------------------
DELETE /price-category/:id           --

        delete from product_price_category
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a price category and all associated product price data.
# -----------------------------------------------------------------------------
DELETE /!price-category/:id          |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "DELETE",
            "uri"    : "/price-category/:id",
            "fields" : [":id", "status"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/product-price/category/:id",
            "fields" : [":id"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "destination": 1,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get a list of all stock damage types.
# -----------------------------------------------------------------------------
GET    /stock-damage-type            >>  

        select id
             , name
        from stock_damage_type 
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new stock damage type.
# -----------------------------------------------------------------------------
POST   /stock-damage-type            <>  

        insert into stock_damage_type 
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a stock damage type.
# -----------------------------------------------------------------------------
PUT    /stock-damage-type/:id        ><  

        update stock_damage_type set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a stock damage type.
# -----------------------------------------------------------------------------
DELETE /stock-damage-type/:id        --  

        delete from stock_damage_type 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Create a stock damage report.
# -----------------------------------------------------------------------------
POST   /stock-damage-report          <>  

        insert into stock_damage_report
          ( activity_id
          , damage_type
          , description
          ) values 
          ( {{activityId}} 
          , {{damageType}}
          , {{description}} 
          )

# -----------------------------------------------------------------------------
#      Get a list of all vehicle maintenance activity types.
# -----------------------------------------------------------------------------
GET    /maintenance-activity-type    >>  

        select id
             , name
        from maintenance_activity_type 
        order by 
          id

# -----------------------------------------------------------------------------
#      Create a new vehicle maintenance activity type.
# -----------------------------------------------------------------------------
POST   /maintenance-activity-type    <>  

        insert into maintenance_activity_type
          ( name 
          ) values 
          ( {{name}} )

# -----------------------------------------------------------------------------
#      Update a vehicle maintenance activity type.
# -----------------------------------------------------------------------------
PUT    /maintenance-activity-type/:id  ><  

        update maintenance_activity_type set name = {{name}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Delete a vehicle maintenance activity type.
# -----------------------------------------------------------------------------
DELETE /maintenance-activity-type/:id  --  

        delete from maintenance_activity_type
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get a list of all products.
# -----------------------------------------------------------------------------
GET    /product                      >>  

        ( id
        , deleted
        , description
        , name
        , unitSize )
        
        select product.id
             , product.deleted
             , product.description
             , product.name
             , product.unit_size
        from product 
        order by 
          product.id

# -----------------------------------------------------------------------------
#      Create a product.
# -----------------------------------------------------------------------------
POST   /product                      <>  

        insert into product 
          ( name
          , description
          , unit_size
          , deleted
          ) values 
          ( {{name}}
          , {{description}}
          , {{unitSize}}
          , 'false' 
          )

# -----------------------------------------------------------------------------
#      Create a product and its connected resources.
#
#      {
#        "name"           : string,
#        "description"    : string,
#        "unitSize"       : string,
#        "limits" : [
#              {
#                "categoryId" : number,
#                "limit"      : number
#              }
#            ],
#        "prices" : [
#              {
#                "priceCatId" : number,
#                "price"      : number
#              }
#            ]
#      }
# -----------------------------------------------------------------------------
POST   /!product                     |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/product",
            "fields" : ["name", "description", "unitSize"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/product-price",
            "expand" : "prices",
            "fields" : ["productId", "priceCatId", "price"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/product-limit",
            "expand" : "limits",
            "fields" : ["productId", "categoryId", "limit"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["limits"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "productId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "productId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "source": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["limits"]
                }
            ]
        }
    ]
}
 
# -----------------------------------------------------------------------------
#      Update a product.
# -----------------------------------------------------------------------------
PUT    /product/:id                  ><  

        update product set name        = {{name}}
                         , description = {{description}}
                         , unit_size   = {{unitSize}}
                         , deleted     = {{deleted}} 
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Update a product and its connected resources.
#
#      {
#        "name"           : string,
#        "description"    : string,
#        "unitSize"       : string,
#        "limits" : [
#              {
#                "categoryId" : number,
#                "limit"      : number
#              }
#            ],
#        "prices" : [
#              {
#                "priceCatId" : number,
#                "price"      : number
#              }
#            ]
#      }
# -----------------------------------------------------------------------------
PUT    /!product/:id                 |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PUT",
            "uri"    : "/product/:id",
            "fields" : ["name", "description", "unitSize", "deleted"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/product-price",
            "expand" : "prices",
            "fields" : ["productId", "priceCatId", "price", "status"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/product-limit",
            "expand" : "limits",
            "fields" : ["productId", "categoryId", "limit", "status"]
        },
        {
            "id"     : 4,
            "method" : "DELETE",
            "uri"    : "/product-price/product/:id",
            "fields" : []
        },
        {
            "id"     : 5,
            "method" : "DELETE",
            "uri"    : "/product-limit/product/:id",
            "fields" : []
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["limits"]
                }
            ]
        },
        {
            "destination": 4,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 5,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "productId"]
                }
            ]
        },
        {
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "productId"]
                }
            ]
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["prices"]
                }
            ]
        },
        {
            "source": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["limits"]
                }
            ]
        },
        {
            "source": 4,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 5,
            "destination": 3,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Soft-delete a product.
# -----------------------------------------------------------------------------
DELETE /product/:id                  --

        update product set deleted = true
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Recover a deleted product.
# -----------------------------------------------------------------------------
PATCH  /product/recover/:id          --

        update product set deleted = false
          where id = {{:id}}

# -----------------------------------------------------------------------------
#      Get all available price information.
# -----------------------------------------------------------------------------
GET    /product-price                >>  

        ( price
        , priceCatId
        , productId
        , priceCategory ) 
        
        select product_price.price
             , product_price.price_cat_id
             , product_price.product_id
             , product_price_category.name 
        from product_price 
          join product_price_category 
            on product_price_category.id = product_price.price_cat_id 

# -----------------------------------------------------------------------------
#      Insert a product price.
# -----------------------------------------------------------------------------
POST   /product-price                <>  

        insert into product_price 
          ( product_id
          , price_cat_id
          , price
          ) values 
          ( {{productId}}
          , {{priceCatId}}
          , {{price}}
          )

# -----------------------------------------------------------------------------
#      Delete all product price information for a product.
# -----------------------------------------------------------------------------
DELETE /product-price/product/:id    --  

        delete from product_price
          where product_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Delete all product price information for a price category.
# -----------------------------------------------------------------------------
DELETE /product-price/category/:id   --  

        delete from product_price
          where price_cat_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Get all product load limit values.
# -----------------------------------------------------------------------------
GET    /product-limit                >>

        ( categoryId
        , limit
        , productId
        , weightCategory )

        select product_limit.category_id
             , product_limit.load_limit
             , product_limit.product_id
             , weight_category.name
        from product_limit
          join weight_category
            on weight_category.id = product_limit.category_id

# -----------------------------------------------------------------------------
#      Insert a product load limit.
# -----------------------------------------------------------------------------
POST   /product-limit                <>  

        insert into product_limit 
          ( product_id
          , category_id
          , load_limit
          ) values 
          ( {{productId}}
          , {{categoryId}}
          , {{limit}}
          )

# -----------------------------------------------------------------------------
#      Delete all product load limit values for a product.
# -----------------------------------------------------------------------------
DELETE /product-limit/product/:id    --  

        delete from product_limit
          where product_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Delete all product load limit values associated with a weight class.
# -----------------------------------------------------------------------------
DELETE /product-limit/category/:id   --  

        delete from product_limit
          where category_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Get all fuel activity data for a vehicle.
# -----------------------------------------------------------------------------
GET    /fuel-activity/vehicle/:id    >>  

        select id
             , amount
             , created
             , meter_reading
        from vehicle_fuel_activity
          where vehicle_id = {{:id}}

# -----------------------------------------------------------------------------
#      Create a new fuel activity log entry.
# -----------------------------------------------------------------------------
POST   /fuel-activity/vehicle/:id    <>  

        insert into vehicle_fuel_activity
          ( created
          , amount
          , meter_reading
          , vehicle_id
          ) values 
          ( 'now()'
          , {{amount}}
          , {{meterReading}}
          , {{:id}}
          )

# -----------------------------------------------------------------------------
#      Delete all fuel activity data for a vehicle.
# -----------------------------------------------------------------------------
DELETE /fuel-activity/vehicle/:id    --  

        delete from vehicle_fuel_activity
          where vehicle_id = {{:id}}
 
# -----------------------------------------------------------------------------
#      Get all maintenance activity data for a vehicle.
# -----------------------------------------------------------------------------
GET    /maintenance-data/vehicle/:id >>  

        select id
             , description
             , start_time
             , end_time
             , meter_reading
             , activity
        from vehicle_maintenance_activity
          where vehicle_id = {{:id}}

# -----------------------------------------------------------------------------
#      Insert a maintenance activity.
# -----------------------------------------------------------------------------
POST   /maintenance-data/vehicle/:id <>  

        insert into vehicle_maintenance_activity
          ( description
          , start_time
          , end_time
          , meter_reading
          , activity
          , vehicle_id
          ) values 
          ( {{description}}
          , {{startTime}}
          , null
          , {{meterReading}}
          , {{activity}} 
          , {{vehicleId}} 
          )

# -----------------------------------------------------------------------------
#      Set end time for a vehicle's most recent, currently open maintenance 
#      activity.
# -----------------------------------------------------------------------------
PATCH  /maintenance/end/vehicle/:id  ><  

        update vehicle_maintenance_activity set end_time = {{endTime}} 
          where id = ( select id 
                       from vehicle_maintenance_activity 
                         where vehicle_id = {{:id}}
                           and end_time is null
                       order by id desc
                         limit 1 )

# -----------------------------------------------------------------------------
#      Create a maintenance activity for a vehicle and set the vehicle's status 
#      to 'in_maintenance'.
# -----------------------------------------------------------------------------
POST   /!maintenance/vehicle/:id     |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/maintenance-data/vehicle/:id",
            "fields" : [":id", "description", "startTime", "meterReading", "activity", "vehicleId"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/vehicle/status/maintenance",
            "fields" : ["vehicleId", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "vehicleId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Complete the most recent, open maintenance activity for a vehicle and 
#      set the vehicle's status to 'active'.
# -----------------------------------------------------------------------------
PATCH  /!maintenance/complete/vehicle/:id  |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/maintenance/end/vehicle/:id",
            "fields" : [":id", "endTime"]
        },
        {
            "id"     : 2,
            "method" : "PATCH",
            "uri"    : "/vehicle/status/active",
            "fields" : ["vehicleId", "status"]
        }
    ],
    "connections": [
        {
            "destination": 1,
            "filters": [],
            "transformers": []
        },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "vehicleId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": []
        },
        {
            "source": 2,
            "filters": [],
            "transformers": []
        },
        {
            "source": 1,
            "filters": [],
            "transformers": []
        }
    ]
}

# -----------------------------------------------------------------------------
#      Get the meter reading of the most recent fuel or maintenance activity
#      for a vehicle.
# -----------------------------------------------------------------------------
GET    /meter-reading/vehicle/:id    -> 

        ( meterReading )
                                                                              
        select GREATEST (
          ( select meter_reading
            from vehicle_fuel_activity
              where vehicle_id = {{:id}}
            order by meter_reading DESC
              limit 1
          )
        , ( select meter_reading
            from vehicle_maintenance_activity
              where vehicle_id = {{:id}}
            order by meter_reading DESC
              limit 1
          )
        , 0
        )
 
# -----------------------------------------------------------------------------
#      Get all orders.
# -----------------------------------------------------------------------------
GET    /order                        >>

        ( id
        , created
        , customerId
        , lastChange
        , status
        , userId 
        , customerName )

        select order_object.id
             , order_object.created
             , order_object.customer_id
             , order_object.last_change
             , order_object.status
             , order_object.user_id
             , customer.name
        from order_object
          join customer
            on customer.id = order_object.customer_id
        order by order_object.id

